var COMPODOC_SEARCH_INDEX = {
  index: {
    version: '2.3.9',
    fields: ['title', 'body'],
    fieldVectors: [
      ['title/guards/AccessTokenGuard.html', [0, 2.46, 1, 2.46]],
      [
        'body/guards/AccessTokenGuard.html',
        [
          1, 2.656, 2, 2.41, 3, 0.214, 4, 0.189, 5, 0.189, 6, 4.024, 7, 4.024,
          8, 2.029, 9, 0.214, 10, 1.073, 11, 1.848, 12, 4.78, 13, 2.795, 14,
          3.6, 15, 1.544, 16, 2.029, 17, 4.682, 18, 4.024, 19, 4.024, 20, 0.641,
          21, 2.41, 22, 1.593, 23, 0.028, 24, 1.593, 25, 0.631, 26, 1.38, 27,
          3.6, 28, 4.78, 29, 2.41, 30, 2.41, 31, 1.073, 32, 1.807, 33, 3.6, 34,
          4.682, 35, 2.41, 36, 0.999, 37, 4.309, 38, 0.57, 39, 2.577, 40, 1.238,
          41, 2.41, 42, 0.718, 43, 1.441, 44, 1.441, 45, 1.591, 46, 1.778, 47,
          2.029, 48, 0.214, 49, 0.045, 50, 1.591, 51, 1.544, 52, 2.029, 53,
          2.611, 54, 2.41, 55, 5.115, 56, 2.41, 57, 2.153, 58, 1.668, 59, 3.6,
          60, 2.029, 61, 3.6, 62, 1.591, 63, 2.029, 64, 2.41, 65, 2.41, 66,
          2.029, 67, 1.153, 68, 1.441, 69, 2.41, 70, 2.41, 71, 0.015, 72, 0.015,
        ],
      ],
      ['title/controllers/AppController.html', [73, 1.994, 74, 2.46]],
      [
        'body/controllers/AppController.html',
        [
          3, 0.366, 4, 0.323, 5, 0.323, 9, 0.366, 10, 1.554, 20, 0.612, 23,
          0.028, 31, 1.227, 36, 1.447, 38, 0.582, 42, 1.227, 48, 0.366, 49,
          0.076, 51, 1.766, 67, 1.318, 71, 0.021, 72, 0.021, 73, 3.119, 74,
          3.848, 75, 2.718, 76, 3.467, 77, 5.066, 78, 1.318, 79, 4.117, 80,
          3.778, 81, 4.117, 82, 2.718, 83, 4.117,
        ],
      ],
      ['title/modules/AppModule.html', [84, 1.43, 85, 2.201]],
      [
        'body/modules/AppModule.html',
        [
          3, 0.233, 4, 0.205, 5, 0.205, 23, 0.028, 25, 0.324, 38, 0.694, 42,
          0.781, 43, 1.568, 44, 1.568, 45, 1.73, 48, 0.233, 49, 0.049, 53,
          1.432, 68, 3.308, 71, 0.016, 72, 0.016, 84, 1.942, 85, 4.007, 86,
          1.316, 87, 1.316, 88, 1.568, 89, 1.568, 90, 1.316, 91, 1.568, 92,
          1.568, 93, 2.207, 94, 2.207, 95, 3.308, 96, 3.308, 97, 3.308, 98,
          2.291, 99, 1.568, 100, 1.432, 101, 1.934, 102, 2.529, 103, 3.831, 104,
          2.621, 105, 1.73, 106, 2.621, 107, 0.781, 108, 2.621, 109, 2.621, 110,
          1.934, 111, 1.432, 112, 3.831, 113, 2.621, 114, 2.621, 115, 2.621,
          116, 2.207, 117, 3.831, 118, 2.621, 119, 2.207, 120, 3.34, 121, 2.207,
          122, 2.621, 123, 2.621, 124, 2.621, 125, 2.621, 126, 2.621, 127,
          2.621, 128, 3.831, 129, 2.621, 130, 2.621, 131, 2.621, 132, 2.621,
          133, 2.621, 134, 2.207, 135, 2.621, 136, 2.621, 137, 1.934, 138,
          1.568, 139, 2.621, 140, 2.621, 141, 2.621, 142, 2.621, 143, 2.621,
          144, 2.621, 145, 2.621, 146, 2.621, 147, 2.621, 148, 2.621, 149,
          2.621, 150, 2.621, 151, 2.621, 152, 2.207, 153, 2.207,
        ],
      ],
      ['title/injectables/AppService.html', [40, 1.147, 80, 2.201]],
      [
        'body/injectables/AppService.html',
        [
          3, 0.387, 4, 0.34, 5, 0.34, 9, 0.387, 10, 1.608, 20, 0.646, 23, 0.027,
          31, 1.295, 36, 1.496, 38, 0.484, 40, 1.855, 42, 1.295, 48, 0.387, 49,
          0.081, 67, 1.391, 71, 0.022, 72, 0.022, 77, 5.165, 80, 3.56, 154,
          2.374, 155, 3.658, 156, 4.345, 157, 3.658, 158, 4.345,
        ],
      ],
      ['title/controllers/AuthController.html', [73, 1.994, 159, 2.201]],
      [
        'body/controllers/AuthController.html',
        [
          3, 0.313, 4, 0.275, 5, 0.275, 9, 0.313, 10, 1.402, 11, 2.274, 13,
          1.921, 15, 1.508, 20, 0.523, 22, 1.3, 23, 0.028, 24, 1.3, 25, 0.434,
          26, 1.126, 31, 1.048, 38, 0.591, 39, 2.102, 42, 1.048, 48, 0.313, 49,
          0.065, 51, 1.508, 67, 1.126, 71, 0.019, 72, 0.019, 73, 2.102, 75,
          2.321, 78, 1.126, 159, 3.106, 160, 2.96, 161, 3.515, 162, 2.594, 163,
          3.913, 164, 3.472, 165, 2.96, 166, 3.319, 167, 3.515, 168, 3.515, 169,
          2.102, 170, 2.102, 171, 3.515, 172, 3.515, 173, 1.629, 174, 3.094,
          175, 2.96, 176, 2.594, 177, 3.515, 178, 3.515, 179, 3.515, 180, 3.515,
          181, 3.515,
        ],
      ],
      ['title/modules/AuthModule.html', [84, 1.43, 95, 1.994]],
      [
        'body/modules/AuthModule.html',
        [
          3, 0.305, 4, 0.269, 5, 0.269, 23, 0.028, 38, 0.688, 42, 1.023, 43,
          2.052, 44, 2.052, 45, 2.265, 46, 2.532, 48, 0.305, 49, 0.064, 71,
          0.019, 72, 0.019, 75, 3.056, 84, 2.247, 86, 1.723, 87, 1.723, 88,
          2.052, 89, 2.052, 90, 1.723, 91, 3.133, 92, 2.052, 95, 3.75, 98,
          2.768, 99, 2.052, 100, 1.875, 102, 2.265, 116, 2.889, 119, 2.889, 152,
          2.889, 153, 2.889, 159, 3.458, 174, 3.296, 175, 2.889, 182, 2.889,
          183, 2.889, 184, 3.296, 185, 3.432, 186, 3.432, 187, 2.889, 188,
          2.889,
        ],
      ],
      ['title/injectables/AuthService.html', [40, 1.147, 174, 1.822]],
      [
        'body/injectables/AuthService.html',
        [
          3, 0.31, 4, 0.273, 5, 0.273, 9, 0.31, 10, 1.395, 11, 2.265, 13, 1.905,
          15, 2.007, 20, 0.696, 22, 1.73, 23, 0.028, 24, 1.73, 25, 0.578, 26,
          1.498, 31, 1.039, 38, 0.589, 39, 2.085, 40, 1.61, 42, 1.039, 48, 0.31,
          49, 0.065, 51, 1.496, 67, 1.117, 71, 0.019, 72, 0.019, 154, 1.905,
          163, 3.897, 164, 3.453, 166, 3.084, 169, 2.085, 170, 2.085, 174,
          2.557, 176, 2.573, 184, 3.383, 187, 2.936, 188, 2.936, 189, 2.936,
          190, 3.487, 191, 3.487, 192, 4.679, 193, 3.487, 194, 3.487, 195,
          3.487,
        ],
      ],
      ['title/classes/ComplexityPlugin.html', [49, 0.062, 196, 2.46]],
      [
        'body/classes/ComplexityPlugin.html',
        [
          3, 0.257, 4, 0.227, 5, 0.227, 9, 0.257, 10, 1.226, 11, 2.235, 15,
          1.241, 20, 0.612, 22, 1.07, 23, 0.028, 24, 1.07, 25, 0.357, 26, 0.926,
          31, 0.862, 32, 2.065, 34, 2.436, 38, 0.614, 48, 0.257, 49, 0.054, 50,
          2.715, 53, 2.247, 57, 1.73, 58, 1.34, 67, 0.926, 71, 0.017, 72, 0.017,
          82, 1.91, 105, 1.91, 107, 0.862, 138, 2.459, 196, 3.035, 197, 0.926,
          198, 2.436, 199, 4.029, 200, 4.388, 201, 2.893, 202, 5.211, 203,
          2.893, 204, 4.113, 205, 2.893, 206, 2.436, 207, 2.135, 208, 3.463,
          209, 4.113, 210, 4.113, 211, 4.113, 212, 4.113, 213, 3.159, 214,
          4.955, 215, 3.463, 216, 2.893, 217, 2.893, 218, 4.113, 219, 2.893,
          220, 2.893, 221, 2.135, 222, 2.893, 223, 2.893, 224, 2.893, 225,
          2.135, 226, 4.113, 227, 2.893, 228, 2.893, 229, 2.893, 230, 2.893,
        ],
      ],
      ['title/classes/CreatePostInput.html', [49, 0.062, 231, 1.822]],
      [
        'body/classes/CreatePostInput.html',
        [
          3, 0.36, 4, 0.317, 5, 0.317, 9, 0.36, 20, 0.766, 23, 0.027, 25, 0.636,
          36, 1.658, 38, 0.451, 48, 0.36, 49, 0.075, 71, 0.021, 72, 0.021, 78,
          1.65, 107, 1.204, 170, 3.393, 197, 1.294, 231, 2.815, 232, 4.777, 233,
          2.667, 234, 1.65, 235, 3.393, 236, 2.86, 237, 4.04, 238, 4.04, 239,
          3.401,
        ],
      ],
      ['title/classes/DateScalar.html', [49, 0.062, 240, 2.201]],
      [
        'body/classes/DateScalar.html',
        [
          3, 0.247, 4, 0.217, 5, 0.217, 9, 0.247, 10, 1.189, 20, 0.76, 22,
          1.728, 23, 0.028, 24, 1.728, 25, 0.717, 26, 1.496, 31, 1.393, 36,
          0.769, 38, 0.445, 48, 0.247, 49, 0.051, 50, 2.633, 57, 1.658, 58,
          2.165, 67, 1.496, 71, 0.016, 72, 0.016, 107, 0.826, 138, 1.658, 197,
          0.888, 234, 1.277, 240, 2.633, 241, 2.334, 242, 4.673, 243, 2.553,
          244, 3.99, 245, 3.99, 246, 3.99, 247, 1.658, 248, 3.575, 249, 5.177,
          250, 3.99, 251, 4.673, 252, 2.773, 253, 3.99, 254, 5.111, 255, 2.773,
          256, 2.773, 257, 3.99, 258, 2.719, 259, 2.773, 260, 3.99, 261, 2.773,
          262, 4.673, 263, 2.773, 264, 2.773, 265, 3.99, 266, 2.773, 267, 2.773,
          268, 3.99, 269, 3.99, 270, 2.773, 271, 2.773, 272, 2.773, 273, 2.773,
        ],
      ],
      ['title/interfaces/IQuery.html', [274, 1.822, 275, 2.46]],
      [
        'body/interfaces/IQuery.html',
        [
          3, 0.389, 4, 0.342, 5, 0.342, 9, 0.389, 10, 1.613, 20, 0.649, 23,
          0.027, 25, 0.539, 31, 1.302, 32, 2.716, 48, 0.389, 71, 0.022, 72,
          0.022, 157, 5.174, 274, 2.385, 275, 3.992, 276, 3.222, 277, 3.222,
          278, 4.366, 279, 3.516, 280, 3.676, 281, 3.222,
        ],
      ],
      ['title/classes/LoggingPlugin.html', [49, 0.062, 282, 2.46]],
      [
        'body/classes/LoggingPlugin.html',
        [
          3, 0.348, 4, 0.307, 5, 0.307, 9, 0.348, 10, 1.505, 11, 2.532, 20,
          0.582, 23, 0.028, 31, 1.166, 32, 2.534, 38, 0.563, 48, 0.348, 49,
          0.073, 50, 3.332, 67, 1.253, 71, 0.021, 72, 0.021, 105, 2.583, 197,
          1.253, 199, 4.705, 200, 4.971, 206, 3.294, 207, 2.887, 208, 4.25, 282,
          3.724, 283, 3.294, 284, 3.913, 285, 3.913, 286, 3.294, 287, 3.913,
          288, 3.913, 289, 3.913, 290, 3.913,
        ],
      ],
      ['title/classes/NewRecipeInput.html', [49, 0.062, 291, 1.822]],
      [
        'body/classes/NewRecipeInput.html',
        [
          3, 0.307, 4, 0.27, 5, 0.27, 9, 0.307, 20, 0.781, 23, 0.028, 25, 0.648,
          26, 1.486, 36, 1.713, 38, 0.518, 48, 0.307, 49, 0.086, 68, 2.06, 71,
          0.019, 72, 0.019, 78, 1.681, 107, 1.027, 197, 1.103, 234, 1.486, 235,
          3.139, 236, 2.432, 239, 3.064, 243, 2.868, 279, 2.06, 291, 2.536, 292,
          4.729, 293, 2.901, 294, 4.42, 295, 2.901, 296, 3.446, 297, 4.642, 298,
          3.446, 299, 2.542, 300, 3.446, 301, 3.446, 302, 3.446, 303, 4.642,
          304, 3.446, 305, 3.446, 306, 2.274, 307, 3.446, 308, 3.446, 309,
          2.542,
        ],
      ],
      ['title/entities/Post.html', [173, 1.545, 310, 1.994]],
      [
        'body/entities/Post.html',
        [
          3, 0.296, 4, 0.261, 5, 0.261, 9, 0.296, 20, 0.823, 23, 0.028, 25,
          0.683, 36, 1.536, 38, 0.505, 48, 0.296, 49, 0.062, 71, 0.019, 72,
          0.019, 78, 1.773, 107, 0.992, 170, 3.083, 173, 2.1, 234, 1.451, 235,
          3.083, 236, 2.684, 247, 1.989, 248, 2.196, 258, 2.779, 310, 2.71, 311,
          2.454, 312, 2.801, 313, 2.211, 314, 4.341, 315, 5.156, 316, 3.326,
          317, 3.326, 318, 3.326, 319, 2.992, 320, 3.326, 321, 3.326, 322,
          3.326, 323, 3.816, 324, 2.992, 325, 4.661, 326, 3.816, 327, 1.989,
        ],
      ],
      ['title/classes/PostInterface.html', [49, 0.062, 328, 2.46]],
      [
        'body/classes/PostInterface.html',
        [
          3, 0.325, 4, 0.286, 5, 0.286, 9, 0.325, 20, 0.803, 23, 0.028, 25,
          0.667, 36, 1.703, 38, 0.407, 48, 0.325, 49, 0.068, 71, 0.02, 72, 0.02,
          78, 1.73, 107, 1.088, 170, 3.231, 173, 1.691, 197, 1.168, 234, 1.544,
          235, 3.231, 236, 2.663, 243, 1.993, 247, 2.182, 258, 2.421, 274,
          1.993, 313, 2.563, 328, 3.559, 329, 3.072, 330, 3.986, 331, 3.649,
          332, 3.649, 333, 3.649, 334, 4.823, 335, 3.649,
        ],
      ],
      ['title/modules/PostsModule.html', [84, 1.43, 96, 1.994]],
      [
        'body/modules/PostsModule.html',
        [
          3, 0.336, 4, 0.296, 5, 0.296, 23, 0.028, 38, 0.674, 42, 1.126, 48,
          0.336, 49, 0.07, 71, 0.02, 72, 0.02, 84, 2.356, 86, 1.896, 87, 1.896,
          88, 2.258, 89, 2.258, 90, 1.896, 91, 3.285, 92, 2.258, 96, 3.707, 98,
          2.95, 99, 2.258, 100, 2.063, 102, 2.493, 110, 2.786, 111, 2.063, 173,
          1.75, 336, 3.179, 337, 3.179, 338, 3.386, 339, 3.776, 340, 3.179, 341,
          3.256, 342, 3.776, 343, 2.786, 344, 3.776,
        ],
      ],
      ['title/classes/PostsResolver.html', [49, 0.062, 341, 2.201]],
      [
        'body/classes/PostsResolver.html',
        [
          3, 0.179, 4, 0.158, 5, 0.158, 9, 0.179, 10, 0.935, 15, 0.863, 20,
          0.776, 22, 1.849, 23, 0.028, 24, 2.098, 25, 0.685, 26, 1.601, 31,
          1.49, 32, 1.575, 38, 0.526, 48, 0.179, 49, 0.037, 51, 0.863, 67,
          1.601, 71, 0.013, 72, 0.013, 78, 1.601, 82, 1.328, 107, 0.6, 173,
          2.629, 197, 0.644, 213, 2.545, 231, 2.731, 258, 2.948, 313, 2.144,
          324, 2.874, 338, 2.731, 340, 1.694, 341, 2.071, 343, 1.485, 345,
          1.694, 346, 3.137, 347, 3.212, 348, 2.641, 349, 3.855, 350, 3.137,
          351, 3.137, 352, 2.012, 353, 2.012, 354, 2.012, 355, 4.353, 356,
          2.012, 357, 3.137, 358, 3.137, 359, 2.012, 360, 1.694, 361, 2.012,
          362, 2.012, 363, 3.665, 364, 2.012, 365, 2.012, 366, 2.012, 367,
          2.012, 368, 3.122, 369, 2.012, 370, 2.641, 371, 3.973, 372, 1.485,
          373, 1.694, 374, 2.315, 375, 1.694, 376, 2.012, 377, 2.012, 378,
          2.012, 379, 2.012, 380, 2.012, 381, 2.012, 382, 2.012, 383, 2.012,
          384, 2.012, 385, 2.012, 386, 2.012, 387, 2.012,
        ],
      ],
      ['title/injectables/PostsService.html', [40, 1.147, 338, 1.822]],
      [
        'body/injectables/PostsService.html',
        [
          3, 0.144, 4, 0.127, 5, 0.127, 9, 0.144, 10, 0.786, 11, 2.377, 13,
          0.884, 15, 1.13, 20, 0.712, 22, 1.679, 23, 0.028, 24, 1.679, 25, 0.56,
          26, 1.454, 31, 1.353, 38, 0.534, 40, 0.907, 42, 0.482, 48, 0.144, 49,
          0.03, 51, 0.694, 53, 2.101, 57, 2.715, 58, 2.104, 60, 2.808, 62, 3.16,
          66, 2.808, 67, 1.533, 71, 0.011, 72, 0.011, 111, 0.884, 154, 0.884,
          169, 2.3, 173, 2.836, 225, 1.945, 231, 2.313, 258, 2.911, 281, 3.35,
          313, 2.141, 314, 2.219, 319, 1.068, 327, 0.967, 338, 1.44, 343, 1.194,
          347, 2.838, 348, 2.219, 360, 2.219, 368, 2.985, 373, 1.362, 374,
          2.461, 375, 1.362, 388, 1.362, 389, 1.945, 390, 2.636, 391, 2.219,
          392, 2.636, 393, 1.618, 394, 2.539, 395, 1.618, 396, 2.636, 397,
          2.636, 398, 1.618, 399, 1.618, 400, 1.618, 401, 2.636, 402, 4.235,
          403, 1.618, 404, 2.219, 405, 1.618, 406, 2.636, 407, 1.618, 408,
          1.362, 409, 1.068, 410, 1.618, 411, 1.618, 412, 1.618, 413, 2.636,
          414, 1.618, 415, 3.846, 416, 2.636, 417, 2.636, 418, 3.335, 419,
          3.335, 420, 1.618, 421, 1.618, 422, 1.618, 423, 2.636, 424, 1.618,
          425, 3.846, 426, 3.846, 427, 2.636,
        ],
      ],
      ['title/interfaces/ReactionPostInput.html', [274, 1.822, 409, 2.201]],
      [
        'body/interfaces/ReactionPostInput.html',
        [
          3, 0.403, 4, 0.355, 5, 0.355, 9, 0.403, 23, 0.027, 25, 0.559, 48,
          0.403, 71, 0.023, 72, 0.023, 233, 2.988, 234, 1.771, 274, 2.473, 276,
          3.34, 363, 5.239, 409, 3.651, 428, 3.811, 429, 5.974,
        ],
      ],
      ['title/entities/Recipe.html', [310, 1.994, 430, 1.822]],
      [
        'body/entities/Recipe.html',
        [
          3, 0.254, 4, 0.224, 5, 0.224, 9, 0.254, 20, 0.814, 23, 0.028, 25,
          0.753, 26, 1.304, 36, 1.692, 38, 0.454, 48, 0.254, 49, 0.053, 68,
          1.707, 71, 0.017, 72, 0.017, 78, 1.754, 107, 0.851, 234, 1.304, 235,
          2.841, 236, 2.201, 243, 2.83, 249, 4.612, 279, 1.707, 294, 3.999, 295,
          2.404, 299, 3.006, 309, 3.006, 310, 2.436, 311, 2.106, 313, 2.349,
          323, 3.43, 325, 4.361, 326, 3.43, 327, 1.707, 430, 2.595, 431, 2.404,
          432, 4.75, 433, 2.855, 434, 2.855, 435, 2.855, 436, 5.18, 437, 2.855,
          438, 2.855, 439, 2.855, 440, 2.855, 441, 3.43, 442, 4.074, 443, 2.855,
          444, 2.855, 445, 2.855, 446, 2.855, 447, 4.074, 448, 2.855,
        ],
      ],
      ['title/classes/RecipeUpdate.html', [49, 0.062, 449, 2.46]],
      [
        'body/classes/RecipeUpdate.html',
        [
          3, 0.363, 4, 0.319, 5, 0.319, 9, 0.363, 20, 0.606, 23, 0.027, 25,
          0.503, 36, 1.438, 38, 0.578, 48, 0.363, 49, 0.076, 58, 1.89, 71,
          0.021, 72, 0.021, 78, 1.306, 107, 1.216, 197, 1.306, 234, 1.66, 236,
          2.402, 239, 3.422, 291, 2.228, 313, 2.655, 330, 3.009, 449, 3.825,
          450, 4.364, 451, 3.434, 452, 4.078, 453, 3.434, 454, 3.009, 455,
          3.434, 456, 4.078,
        ],
      ],
      ['title/classes/RecipesArgs.html', [49, 0.062, 457, 1.994]],
      [
        'body/classes/RecipesArgs.html',
        [
          3, 0.321, 4, 0.282, 5, 0.282, 9, 0.321, 20, 0.711, 23, 0.028, 25,
          0.59, 38, 0.533, 48, 0.321, 49, 0.089, 71, 0.02, 72, 0.02, 78, 1.531,
          107, 1.074, 197, 1.154, 234, 1.531, 236, 1.669, 247, 2.86, 248, 3.157,
          258, 2.401, 299, 3.529, 306, 2.379, 309, 3.529, 319, 3.157, 324,
          3.544, 457, 2.86, 458, 3.034, 459, 5.369, 460, 4.52, 461, 3.603, 462,
          3.603, 463, 4.783, 464, 3.603, 465, 3.603, 466, 4.783, 467, 3.603,
          468, 3.603, 469, 3.603, 470, 3.603, 471, 3.603,
        ],
      ],
      ['title/modules/RecipesModule.html', [84, 1.43, 97, 1.994]],
      [
        'body/modules/RecipesModule.html',
        [
          3, 0.328, 4, 0.288, 5, 0.288, 23, 0.028, 38, 0.686, 42, 1.097, 48,
          0.328, 49, 0.068, 71, 0.02, 72, 0.02, 84, 2.327, 86, 1.847, 87, 1.847,
          88, 2.201, 89, 2.201, 90, 1.847, 91, 3.244, 92, 2.201, 97, 3.68, 98,
          2.9, 99, 2.201, 100, 2.01, 102, 2.429, 110, 2.715, 111, 2.01, 240,
          3.201, 430, 2.01, 472, 3.098, 473, 3.098, 474, 3.362, 475, 3.68, 476,
          3.68, 477, 3.201, 478, 3.68, 479, 3.098, 480, 2.715, 481, 3.68,
        ],
      ],
      ['title/classes/RecipesResolver.html', [49, 0.062, 477, 2.201]],
      [
        'body/classes/RecipesResolver.html',
        [
          3, 0.18, 4, 0.158, 5, 0.158, 9, 0.18, 10, 0.937, 11, 2.382, 15, 0.865,
          20, 0.744, 22, 1.747, 23, 0.028, 24, 1.747, 25, 0.618, 26, 1.513, 31,
          1.408, 32, 2.512, 36, 1.45, 38, 0.583, 42, 0.601, 48, 0.18, 49, 0.037,
          51, 0.865, 53, 2.109, 57, 1.206, 58, 1.456, 62, 2.074, 67, 1.513, 71,
          0.013, 72, 0.013, 78, 1.513, 82, 1.331, 107, 0.601, 138, 1.206, 169,
          1.206, 197, 0.646, 213, 1.331, 291, 2.381, 313, 1.87, 370, 1.698, 371,
          1.698, 372, 1.488, 430, 3.382, 454, 1.488, 457, 2.993, 474, 2.734,
          477, 2.074, 479, 1.698, 480, 1.488, 482, 1.488, 483, 3.861, 484,
          4.724, 485, 3.143, 486, 3.143, 487, 2.017, 488, 2.017, 489, 2.017,
          490, 3.143, 491, 2.017, 492, 3.143, 493, 2.017, 494, 3.143, 495,
          2.017, 496, 2.017, 497, 2.017, 498, 2.017, 499, 2.017, 500, 2.017,
          501, 3.143, 502, 2.017, 503, 2.017, 504, 2.017, 505, 2.849, 506,
          1.698, 507, 1.698, 508, 1.698, 509, 2.017, 510, 3.143, 511, 2.017,
          512, 2.017, 513, 2.017, 514, 2.017, 515, 2.017, 516, 3.143, 517,
          2.017, 518, 2.017, 519, 2.017, 520, 2.017, 521, 2.017, 522, 2.017,
          523, 2.017,
        ],
      ],
      ['title/injectables/RecipesService.html', [40, 1.147, 474, 1.822]],
      [
        'body/injectables/RecipesService.html',
        [
          3, 0.212, 4, 0.186, 5, 0.186, 9, 0.212, 10, 1.062, 11, 2.616, 13,
          1.299, 15, 1.528, 20, 0.756, 22, 1.88, 23, 0.028, 24, 1.88, 25, 0.628,
          26, 1.628, 31, 1.415, 32, 2.858, 36, 1.481, 38, 0.595, 39, 1.421, 40,
          1.226, 42, 0.708, 48, 0.212, 49, 0.044, 51, 1.019, 67, 1.52, 68,
          1.421, 71, 0.015, 72, 0.015, 111, 1.299, 154, 1.299, 291, 2.593, 313,
          1.528, 327, 1.421, 347, 2.629, 389, 2.629, 391, 3, 394, 3.357, 404, 3,
          408, 2.001, 430, 2.335, 454, 1.754, 457, 3.041, 474, 1.946, 480,
          1.754, 507, 2.001, 508, 2.001, 524, 2.001, 525, 3.563, 526, 2.377,
          527, 2.377, 528, 3.563, 529, 3.563, 530, 3, 531, 3.563, 532, 3.563,
          533, 3, 534, 3.563, 535, 3.563, 536, 3.563, 537, 3.563, 538, 3.563,
          539, 2.377, 540, 2.377, 541, 3.563, 542, 2.377, 543, 3.563, 544,
          2.377, 545, 2.377, 546, 2.377,
        ],
      ],
      ['title/classes/SignInDto.html', [49, 0.062, 166, 1.822]],
      [
        'body/classes/SignInDto.html',
        [
          3, 0.36, 4, 0.317, 5, 0.317, 9, 0.36, 20, 0.766, 23, 0.027, 25, 0.636,
          36, 1.658, 38, 0.451, 48, 0.36, 49, 0.095, 71, 0.021, 72, 0.021, 78,
          1.65, 134, 4.777, 166, 2.815, 197, 1.294, 234, 1.65, 306, 2.667, 547,
          3.402, 548, 4.777, 549, 4.04, 550, 4.04, 551, 4.04, 552, 4.04, 553,
          5.153, 554, 5.674, 555, 5.153,
        ],
      ],
      ['title/injectables/SignInProvider.html', [40, 1.147, 184, 1.822]],
      [
        'body/injectables/SignInProvider.html',
        [
          3, 0.262, 4, 0.23, 5, 0.23, 9, 0.262, 10, 1.241, 11, 2.072, 13, 2.274,
          15, 1.785, 16, 2.477, 17, 4.979, 18, 4.066, 19, 4.421, 20, 0.619, 22,
          1.539, 23, 0.028, 24, 1.539, 25, 0.514, 26, 1.333, 31, 0.877, 38,
          0.618, 39, 2.888, 40, 1.432, 42, 0.877, 43, 1.759, 44, 1.759, 45,
          2.747, 46, 2.171, 48, 0.262, 49, 0.055, 51, 1.785, 52, 2.477, 53,
          1.607, 62, 1.942, 63, 2.477, 67, 0.942, 71, 0.017, 72, 0.017, 154,
          1.607, 163, 3.564, 164, 3.071, 165, 3.504, 166, 3.027, 169, 1.759,
          176, 2.171, 184, 2.274, 548, 2.477, 556, 4.066, 557, 2.477, 558,
          2.942, 559, 2.942, 560, 4.162, 561, 2.942, 562, 2.942, 563, 2.942,
          564, 2.942, 565, 2.942, 566, 2.942, 567, 2.942, 568, 2.942, 569,
          2.942, 570, 2.942, 571, 2.942,
        ],
      ],
      ['title/classes/UpdatePostInput.html', [49, 0.062, 368, 1.994]],
      [
        'body/classes/UpdatePostInput.html',
        [
          3, 0.363, 4, 0.319, 5, 0.319, 9, 0.363, 20, 0.606, 23, 0.027, 25,
          0.503, 38, 0.578, 48, 0.363, 49, 0.076, 71, 0.021, 72, 0.021, 78,
          1.306, 107, 1.216, 197, 1.306, 231, 2.228, 233, 2.692, 234, 1.66, 236,
          2.402, 239, 3.422, 258, 2.602, 313, 2.444, 324, 3.422, 330, 3.009,
          368, 3.1, 374, 3.009, 389, 3.009, 453, 3.434, 455, 3.434, 572, 4.364,
          573, 4.078, 574, 4.078,
        ],
      ],
      ['title/coverage.html', [575, 3.35]],
      [
        'body/coverage.html',
        [
          0, 1.702, 1, 1.702, 5, 0.181, 6, 1.943, 7, 1.943, 8, 1.943, 23, 0.027,
          25, 0.43, 40, 1.727, 49, 0.115, 58, 1.069, 71, 0.014, 72, 0.014, 73,
          2.083, 74, 1.702, 76, 1.943, 80, 1.523, 90, 1.158, 101, 1.702, 120,
          1.702, 155, 1.943, 159, 1.523, 160, 1.943, 162, 1.702, 166, 1.26, 173,
          1.614, 174, 1.26, 184, 1.26, 189, 1.943, 196, 1.702, 198, 1.943, 231,
          1.26, 232, 1.943, 233, 2.771, 240, 1.523, 241, 1.943, 274, 1.903, 275,
          1.702, 277, 2.571, 279, 1.38, 282, 1.702, 283, 1.943, 291, 1.26, 292,
          1.943, 293, 1.943, 310, 2.083, 312, 2.933, 319, 4.398, 328, 1.702,
          329, 1.943, 338, 1.26, 341, 1.523, 345, 1.943, 368, 1.38, 388, 1.943,
          409, 1.523, 428, 1.943, 430, 1.903, 431, 2.933, 449, 1.702, 450,
          1.943, 451, 1.943, 457, 1.38, 458, 1.943, 474, 1.26, 477, 1.523, 482,
          2.571, 505, 1.702, 524, 1.943, 547, 1.943, 556, 1.943, 557, 1.943,
          572, 1.943, 575, 1.702, 576, 1.943, 577, 2.307, 578, 2.307, 579,
          5.642, 580, 4.198, 581, 5.642, 582, 5.279, 583, 1.943, 584, 4.198,
          585, 1.943, 586, 1.943, 587, 3.484, 588, 1.943, 589, 3.484, 590,
          2.307, 591, 1.943, 592, 3.484, 593, 2.307, 594, 2.307, 595, 2.307,
          596, 2.307, 597, 2.307, 598, 2.307,
        ],
      ],
      ['title/dependencies.html', [87, 2.012, 599, 2.349]],
      [
        'body/dependencies.html',
        [
          23, 0.028, 42, 1.111, 43, 2.229, 44, 2.229, 47, 3.138, 49, 0.091, 71,
          0.02, 72, 0.02, 87, 1.871, 105, 2.46, 107, 1.111, 111, 2.036, 138,
          3.265, 207, 2.75, 213, 2.46, 214, 3.138, 306, 2.46, 327, 2.229, 506,
          3.138, 600, 3.727, 601, 3.727, 602, 3.727, 603, 4.891, 604, 5.459,
          605, 3.727, 606, 3.727, 607, 4.891, 608, 3.727, 609, 3.727, 610,
          3.727, 611, 3.727, 612, 3.727, 613, 3.138, 614, 3.727, 615, 3.727,
          616, 3.727, 617, 3.727, 618, 3.727, 619, 3.727, 620, 3.727, 621,
          3.727, 622, 3.727, 623, 3.727, 624, 3.727,
        ],
      ],
      ['title/miscellaneous/functions.html', [625, 1.524, 626, 3.374]],
      [
        'body/miscellaneous/functions.html',
        [
          9, 0.403, 22, 1.674, 23, 0.024, 24, 1.674, 25, 0.559, 26, 1.449, 36,
          1.535, 71, 0.023, 72, 0.023, 90, 2.999, 215, 3.811, 585, 3.811, 586,
          4.657, 588, 4.657, 591, 3.811, 625, 2.473, 626, 3.811, 627, 4.526,
          628, 4.526, 629, 4.526, 630, 5.531, 631, 5.531,
        ],
      ],
      ['title/index.html', [9, 0.248, 286, 2.349, 632, 2.79]],
      [
        'body/index.html',
        [
          4, 0.168, 23, 0.026, 71, 0.013, 72, 0.013, 100, 2.801, 137, 2.959,
          243, 1.17, 394, 1.414, 441, 1.803, 460, 1.803, 530, 1.803, 533, 1.803,
          575, 1.58, 576, 2.772, 633, 2.142, 634, 2.142, 635, 4.01, 636, 3.292,
          637, 2.142, 638, 2.142, 639, 2.142, 640, 2.142, 641, 3.292, 642,
          1.803, 643, 1.803, 644, 4.5, 645, 2.142, 646, 4.5, 647, 5.512, 648,
          2.142, 649, 5.341, 650, 2.142, 651, 2.142, 652, 2.142, 653, 3.292,
          654, 2.142, 655, 3.292, 656, 2.142, 657, 4.01, 658, 2.142, 659, 3.292,
          660, 2.142, 661, 2.142, 662, 2.142, 663, 2.142, 664, 2.142, 665, 4.5,
          666, 5.512, 667, 5.128, 668, 2.142, 669, 3.292, 670, 2.142, 671,
          2.142, 672, 2.142, 673, 2.142, 674, 5.128, 675, 3.292, 676, 4.5, 677,
          2.142, 678, 3.292, 679, 2.142, 680, 2.142, 681, 3.292, 682, 5.128,
          683, 4.5, 684, 2.142, 685, 3.292, 686, 2.142, 687, 2.142, 688, 2.142,
          689, 2.142, 690, 4.5, 691, 2.142, 692, 2.142, 693, 2.142, 694, 3.292,
          695, 2.142, 696, 2.142, 697, 2.142, 698, 2.142, 699, 2.142, 700,
          3.292, 701, 2.142, 702, 2.142, 703, 2.142, 704, 3.292, 705, 2.142,
          706, 2.142, 707, 3.789, 708, 3.292, 709, 2.142, 710, 2.142, 711,
          2.142, 712, 2.142, 713, 2.142, 714, 2.142, 715, 2.142, 716, 2.142,
          717, 3.292, 718, 2.142, 719, 2.142, 720, 2.142, 721, 4.01, 722, 2.142,
          723, 2.142, 724, 2.142, 725, 2.142, 726, 2.142, 727, 2.142, 728,
          3.292, 729, 2.142, 730, 2.142, 731, 2.142, 732, 2.142, 733, 2.142,
          734, 3.292, 735, 2.142, 736, 2.142, 737, 2.142, 738, 2.772, 739,
          3.292, 740, 2.142, 741, 2.142, 742, 2.142, 743, 2.142, 744, 2.142,
          745, 2.142, 746, 2.142, 747, 2.142, 748, 2.142, 749, 2.142, 750,
          2.142, 751, 2.142, 752, 2.142, 753, 2.142, 754, 2.142, 755, 2.142,
          756, 2.142, 757, 1.803,
        ],
      ],
      ['title/modules.html', [86, 2.279]],
      [
        'body/modules.html',
        [
          23, 0.023, 71, 0.023, 72, 0.023, 85, 3.084, 86, 2.346, 95, 2.794, 96,
          2.794, 97, 2.794, 707, 5.296, 758, 6.29, 759, 6.29, 760, 6.29,
        ],
      ],
      ['title/overview.html', [761, 3.822]],
      [
        'body/overview.html',
        [
          0, 2.637, 23, 0.026, 71, 0.019, 72, 0.019, 75, 2.359, 84, 1.533, 85,
          4.177, 86, 1.794, 87, 1.794, 88, 2.137, 89, 2.137, 90, 1.794, 91,
          2.137, 92, 2.137, 93, 3.009, 94, 3.009, 95, 3.725, 96, 3.55, 97, 3.55,
          98, 2.844, 99, 2.137, 100, 1.952, 154, 1.952, 174, 2.921, 182, 3.009,
          183, 3.009, 184, 2.921, 197, 1.144, 225, 2.637, 276, 2.637, 311,
          2.637, 336, 3.009, 337, 3.009, 338, 2.921, 472, 3.009, 473, 3.009,
          474, 2.921, 761, 3.009, 762, 3.574, 763, 5.347, 764, 3.574, 765,
          3.574,
        ],
      ],
      ['title/properties.html', [234, 1.283, 599, 2.349]],
      [
        'body/properties.html',
        [
          23, 0.027, 71, 0.024, 72, 0.024, 137, 3.603, 234, 1.564, 243, 2.668,
          394, 3.224, 613, 4.112, 642, 4.112, 643, 4.112, 738, 4.112, 757,
          4.112, 766, 4.884,
        ],
      ],
      ['title/miscellaneous/typealiases.html', [625, 1.524, 767, 4.007]],
      [
        'body/miscellaneous/typealiases.html',
        [
          9, 0.44, 23, 0.025, 25, 0.61, 71, 0.024, 72, 0.024, 277, 3.644, 279,
          3.486, 280, 4.159, 281, 3.644, 625, 2.698, 768, 4.939, 769, 4.939,
        ],
      ],
      ['title/miscellaneous/variables.html', [221, 2.957, 625, 1.524]],
      [
        'body/miscellaneous/variables.html',
        [
          9, 0.393, 23, 0.026, 36, 1.224, 58, 2.044, 71, 0.022, 72, 0.022, 101,
          3.255, 120, 4.017, 121, 3.714, 162, 4.017, 221, 3.255, 247, 3.532,
          248, 3.898, 372, 4.017, 482, 3.255, 505, 4.358, 583, 3.714, 625, 2.41,
          770, 4.411, 771, 4.411, 772, 4.411, 773, 4.411,
        ],
      ],
    ],
    invertedIndex: [
      [
        '',
        {
          _index: 23,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        '0',
        {
          _index: 319,
          title: {},
          body: {
            'entities/Post.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesArgs.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['0.14.1', { _index: 611, title: {}, body: { 'dependencies.html': {} } }],
      ['0.2.2', { _index: 621, title: {}, body: { 'dependencies.html': {} } }],
      ['0.3.20', { _index: 624, title: {}, body: { 'dependencies.html': {} } }],
      ['0.5.1', { _index: 610, title: {}, body: { 'dependencies.html': {} } }],
      ['0/1', { _index: 581, title: {}, body: { 'coverage.html': {} } }],
      ['0/2', { _index: 579, title: {}, body: { 'coverage.html': {} } }],
      ['0/3', { _index: 582, title: {}, body: { 'coverage.html': {} } }],
      ['0/4', { _index: 584, title: {}, body: { 'coverage.html': {} } }],
      ['0/5', { _index: 589, title: {}, body: { 'coverage.html': {} } }],
      ['0/6', { _index: 593, title: {}, body: { 'coverage.html': {} } }],
      ['0/7', { _index: 594, title: {}, body: { 'coverage.html': {} } }],
      ['0/8', { _index: 592, title: {}, body: { 'coverage.html': {} } }],
      [
        '1',
        {
          _index: 225,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'injectables/PostsService.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        '1.0.0',
        {
          _index: 613,
          title: {},
          body: { 'dependencies.html': {}, 'properties.html': {} },
        },
      ],
      ['1.1.26', { _index: 602, title: {}, body: { 'dependencies.html': {} } }],
      ['1/6', { _index: 596, title: {}, body: { 'coverage.html': {} } }],
      [
        '10',
        { _index: 271, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      ['11.0.0', { _index: 607, title: {}, body: { 'dependencies.html': {} } }],
      ['11.0.8', { _index: 604, title: {}, body: { 'dependencies.html': {} } }],
      [
        '12345',
        { _index: 135, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['13.0.2', { _index: 603, title: {}, body: { 'dependencies.html': {} } }],
      ['14', { _index: 765, title: {}, body: { 'overview.html': {} } }],
      ['16', { _index: 595, title: {}, body: { 'coverage.html': {} } }],
      [
        '16.10.0',
        { _index: 612, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['2', { _index: 763, title: {}, body: { 'overview.html': {} } }],
      [
        '20',
        {
          _index: 226,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        '25',
        { _index: 463, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        '255',
        { _index: 297, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      ['3.0.0', { _index: 614, title: {}, body: { 'dependencies.html': {} } }],
      ['4', { _index: 762, title: {}, body: { 'overview.html': {} } }],
      ['4.0.0', { _index: 605, title: {}, body: { 'dependencies.html': {} } }],
      ['4.11.3', { _index: 600, title: {}, body: { 'dependencies.html': {} } }],
      ['5', { _index: 764, title: {}, body: { 'overview.html': {} } }],
      [
        '5432',
        { _index: 132, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['7.8.1', { _index: 623, title: {}, body: { 'dependencies.html': {} } }],
      ['8.13.1', { _index: 618, title: {}, body: { 'dependencies.html': {} } }],
      ['9.0.2', { _index: 616, title: {}, body: { 'dependencies.html': {} } }],
      [
        'abstract',
        { _index: 335, title: {}, body: { 'classes/PostInterface.html': {} } },
      ],
      [
        'accesstoken',
        {
          _index: 560,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'accesstokenguard',
        {
          _index: 1,
          title: { 'guards/AccessTokenGuard.html': {} },
          body: { 'guards/AccessTokenGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'addrecipe',
        {
          _index: 483,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'addrecipe(newrecipedata',
        {
          _index: 489,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      ['alias', { _index: 590, title: {}, body: { 'coverage.html': {} } }],
      [
        'aliases',
        {
          _index: 768,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'allowed',
        {
          _index: 229,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      ['allowing', { _index: 695, title: {}, body: { 'index.html': {} } }],
      ['amazing', { _index: 744, title: {}, body: { 'index.html': {} } }],
      [
        'apollo/server',
        {
          _index: 207,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'apollo/server/plugin/landingpage/default',
        { _index: 113, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'apollodriver',
        { _index: 103, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'apollodriverconfig',
        { _index: 104, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'apolloserverplugin',
        {
          _index: 199,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
          },
        },
      ],
      [
        'apolloserverpluginlandingpagelocaldefault',
        { _index: 112, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'app.service',
        {
          _index: 81,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'appconfig',
        { _index: 117, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'appcontroller',
        {
          _index: 74,
          title: { 'controllers/AppController.html': {} },
          body: { 'controllers/AppController.html': {}, 'coverage.html': {} },
        },
      ],
      ['application', { _index: 667, title: {}, body: { 'index.html': {} } }],
      ['applications', { _index: 641, title: {}, body: { 'index.html': {} } }],
      [
        'appmodule',
        {
          _index: 85,
          title: { 'modules/AppModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'appservice',
        {
          _index: 80,
          title: { 'injectables/AppService.html': {} },
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'args',
        {
          _index: 372,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'classes/RecipesResolver.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        "args('id",
        { _index: 385, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        "args('newrecipedata",
        {
          _index: 517,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        "args('reaction",
        { _index: 386, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'argstype',
        { _index: 466, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'array',
        { _index: 442, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'ast',
        { _index: 256, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'ast.kind',
        { _index: 268, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'async',
        {
          _index: 11,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'audience',
        {
          _index: 564,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'auth',
        {
          _index: 162,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'auth.controller',
        { _index: 186, title: {}, body: { 'modules/AuthModule.html': {} } },
      ],
      [
        'auth.service',
        {
          _index: 175,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
          },
        },
      ],
      [
        'auth/auth.module',
        { _index: 114, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'auth/config/jwt.config',
        { _index: 115, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'authcontroller',
        {
          _index: 159,
          title: { 'controllers/AuthController.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'authmodule',
        {
          _index: 95,
          title: { 'modules/AuthModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      ['author', { _index: 750, title: {}, body: { 'index.html': {} } }],
      [
        'authservice',
        {
          _index: 174,
          title: { 'injectables/AuthService.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'autoloadentities',
        { _index: 140, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'autoschemafile',
        { _index: 144, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'await',
        {
          _index: 62,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      ['aws', { _index: 685, title: {}, body: { 'index.html': {} } }],
      ['backers', { _index: 745, title: {}, body: { 'index.html': {} } }],
      ['based', { _index: 680, title: {}, body: { 'index.html': {} } }],
      [
        'bearer',
        { _index: 70, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      ['board', { _index: 737, title: {}, body: { 'index.html': {} } }],
      [
        'body',
        {
          _index: 170,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/CreatePostInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
          },
        },
      ],
      [
        'boolean',
        {
          _index: 501,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'bootstrap',
        {
          _index: 90,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'overview.html': {},
          },
        },
      ],
      ['browse', { _index: 760, title: {}, body: { 'modules.html': {} } }],
      ['browser', { _index: 758, title: {}, body: { 'modules.html': {} } }],
      ['building', { _index: 636, title: {}, body: { 'index.html': {} } }],
      [
        'business',
        {
          _index: 531,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'canactivate',
        { _index: 12, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'canactivate(context',
        { _index: 27, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'case.directive.ts',
        {
          _index: 586,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'catch',
        {
          _index: 66,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      ['channel', { _index: 710, title: {}, body: { 'index.html': {} } }],
      ['check', { _index: 674, title: {}, body: { 'index.html': {} } }],
      [
        'class',
        {
          _index: 49,
          title: {
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'classes/SignInDto.html': {},
            'classes/UpdatePostInput.html': {},
          },
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'classes',
        {
          _index: 197,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'classes/SignInDto.html': {},
            'classes/UpdatePostInput.html': {},
            'overview.html': {},
          },
        },
      ],
      ['clicks', { _index: 694, title: {}, body: { 'index.html': {} } }],
      [
        'client',
        { _index: 265, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      ['cloud', { _index: 679, title: {}, body: { 'index.html': {} } }],
      [
        'cluster_appmodule',
        {
          _index: 93,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_appmodule_imports',
        {
          _index: 94,
          title: {},
          body: { 'modules/AppModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_authmodule',
        {
          _index: 182,
          title: {},
          body: { 'modules/AuthModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_authmodule_providers',
        {
          _index: 183,
          title: {},
          body: { 'modules/AuthModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_postsmodule',
        {
          _index: 336,
          title: {},
          body: { 'modules/PostsModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_postsmodule_providers',
        {
          _index: 337,
          title: {},
          body: { 'modules/PostsModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_recipesmodule',
        {
          _index: 472,
          title: {},
          body: { 'modules/RecipesModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'cluster_recipesmodule_providers',
        {
          _index: 473,
          title: {},
          body: { 'modules/RecipesModule.html': {}, 'overview.html': {} },
        },
      ],
      [
        'column',
        {
          _index: 325,
          title: {},
          body: { 'entities/Post.html': {}, 'entities/Recipe.html': {} },
        },
      ],
      [
        'column({type',
        { _index: 440, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      ['come', { _index: 701, title: {}, body: { 'index.html': {} } }],
      [
        'common/scalars/date.scalar',
        { _index: 476, title: {}, body: { 'modules/RecipesModule.html': {} } },
      ],
      [
        'complex',
        {
          _index: 227,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'complexity',
        {
          _index: 214,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'complexityplugin',
        {
          _index: 196,
          title: { 'classes/ComplexityPlugin.html': {} },
          body: { 'classes/ComplexityPlugin.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'compodoc/compodoc',
        { _index: 601, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'config/app.config',
        { _index: 118, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'config/jwt.config',
        {
          _index: 46,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AuthModule.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'configmodule',
        {
          _index: 116,
          title: {},
          body: { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
        },
      ],
      [
        'configmodule.forfeature(jwtconfig',
        {
          _index: 152,
          title: {},
          body: { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
        },
      ],
      [
        'configmodule.forroot',
        { _index: 122, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'configtype',
        {
          _index: 19,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        "console.log('query",
        {
          _index: 230,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        "console.log('request",
        { _index: 285, title: {}, body: { 'classes/LoggingPlugin.html': {} } },
      ],
      [
        "console.log('will",
        { _index: 288, title: {}, body: { 'classes/LoggingPlugin.html': {} } },
      ],
      [
        'const',
        {
          _index: 53,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AppModule.html': {},
            'classes/ComplexityPlugin.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'constructor',
        {
          _index: 15,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'constructor(gqlschemahost',
        {
          _index: 201,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'constructor(jwtservice',
        {
          _index: 16,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'constructor(postrepository',
        {
          _index: 393,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'constructor(postsservice',
        { _index: 352, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'constructor(private',
        {
          _index: 82,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/PostsResolver.html': {},
            'classes/RecipesResolver.html': {},
          },
        },
      ],
      [
        'constructor(reciperepository',
        {
          _index: 526,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'constructor(recipesservice',
        {
          _index: 487,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'constructor(signinprovider',
        {
          _index: 190,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'context',
        { _index: 30, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'context.switchtohttp().getrequest',
        { _index: 54, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'controller',
        {
          _index: 73,
          title: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
          },
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        "controller('auth",
        {
          _index: 177,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'controllers',
        {
          _index: 75,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'overview.html': {},
          },
        },
      ],
      ['courses', { _index: 716, title: {}, body: { 'index.html': {} } }],
      [
        'coverage',
        {
          _index: 575,
          title: { 'coverage.html': {} },
          body: { 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'create',
        {
          _index: 389,
          title: {},
          body: {
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'create(createpostinput',
        {
          _index: 397,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'create(data',
        {
          _index: 538,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'createdatecolumn',
        { _index: 447, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'createpost',
        { _index: 346, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        "createpost(@args('createpostinput",
        { _index: 376, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'createpost(createpostinput',
        { _index: 354, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'createpostinput',
        {
          _index: 231,
          title: { 'classes/CreatePostInput.html': {} },
          body: {
            'classes/CreatePostInput.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'creationdate',
        { _index: 432, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'custom',
        { _index: 250, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'customscalar',
        { _index: 242, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'data',
        {
          _index: 540,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'database',
        { _index: 136, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'date',
        {
          _index: 249,
          title: {},
          body: { 'classes/DateScalar.html': {}, 'entities/Recipe.html': {} },
        },
      ],
      [
        'date(parseint(ast.value',
        { _index: 270, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'date(value',
        { _index: 264, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'datescalar',
        {
          _index: 240,
          title: { 'classes/DateScalar.html': {} },
          body: {
            'classes/DateScalar.html': {},
            'modules/RecipesModule.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'debug',
        { _index: 148, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'declarations',
        {
          _index: 89,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'decorators',
        {
          _index: 78,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'classes/CreatePostInput.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'classes/SignInDto.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      ['deeper', { _index: 712, title: {}, body: { 'index.html': {} } }],
      [
        'default',
        {
          _index: 247,
          title: {},
          body: {
            'classes/DateScalar.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/RecipesArgs.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'defaultcomplexity',
        {
          _index: 224,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'defined',
        {
          _index: 20,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'demonstration',
        {
          _index: 535,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'dependencies',
        {
          _index: 87,
          title: { 'dependencies.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'dependencies.html': {},
            'overview.html': {},
          },
        },
      ],
      ['deploy', { _index: 665, title: {}, body: { 'index.html': {} } }],
      ['deploying', { _index: 684, title: {}, body: { 'index.html': {} } }],
      ['deployment', { _index: 675, title: {}, body: { 'index.html': {} } }],
      ['deploywith', { _index: 693, title: {}, body: { 'index.html': {} } }],
      [
        'description',
        {
          _index: 243,
          title: {},
          body: {
            'classes/DateScalar.html': {},
            'classes/NewRecipeInput.html': {},
            'classes/PostInterface.html': {},
            'entities/Recipe.html': {},
            'index.html': {},
            'properties.html': {},
          },
        },
      ],
      ['development', { _index: 650, title: {}, body: { 'index.html': {} } }],
      ['devtools', { _index: 723, title: {}, body: { 'index.html': {} } }],
      [
        'didresolveoperation',
        {
          _index: 217,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'directive',
        { _index: 446, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        "directive('@upper",
        { _index: 448, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        "directive('@upper')@column({type",
        { _index: 444, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'directivename',
        {
          _index: 631,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      ['discord', { _index: 709, title: {}, body: { 'index.html': {} } }],
      [
        'dislike',
        {
          _index: 429,
          title: {},
          body: { 'interfaces/ReactionPostInput.html': {} },
        },
      ],
      ['dive', { _index: 711, title: {}, body: { 'index.html': {} } }],
      [
        'document',
        {
          _index: 218,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'documentation',
        {
          _index: 576,
          title: {},
          body: { 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'driver',
        { _index: 143, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'dto/create',
        {
          _index: 375,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      [
        'dto/new',
        {
          _index: 507,
          title: {},
          body: {
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'dto/reaction',
        {
          _index: 410,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'dto/recipes.args',
        {
          _index: 508,
          title: {},
          body: {
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'dto/update',
        {
          _index: 373,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      [
        'dtos/signin.dto',
        {
          _index: 176,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      ['e2e', { _index: 660, title: {}, body: { 'index.html': {} } }],
      ['efficient', { _index: 637, title: {}, body: { 'index.html': {} } }],
      ['efficiently', { _index: 672, title: {}, body: { 'index.html': {} } }],
      [
        'email',
        {
          _index: 548,
          title: {},
          body: {
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      ['ensure', { _index: 670, title: {}, body: { 'index.html': {} } }],
      ['enterprise', { _index: 727, title: {}, body: { 'index.html': {} } }],
      [
        'entities',
        {
          _index: 311,
          title: {},
          body: {
            'entities/Post.html': {},
            'entities/Recipe.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'entities/posts.entity',
        {
          _index: 343,
          title: {},
          body: {
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      [
        'entity',
        {
          _index: 310,
          title: { 'entities/Post.html': {}, 'entities/Recipe.html': {} },
          body: {
            'entities/Post.html': {},
            'entities/Recipe.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'env',
        {
          _index: 120,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'env.${env',
        { _index: 125, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'envfilepath',
        { _index: 124, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'error',
        {
          _index: 422,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        "error('couldnt",
        {
          _index: 416,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        "error('network",
        {
          _index: 421,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        "error('post",
        {
          _index: 418,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'error(`invalid',
        { _index: 272, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'estimators',
        {
          _index: 223,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      ['example', { _index: 646, title: {}, body: { 'index.html': {} } }],
      [
        'example@gmail.com',
        {
          _index: 563,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'executioncontext',
        { _index: 28, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'expected',
        { _index: 273, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      ['experience', { _index: 714, title: {}, body: { 'index.html': {} } }],
      [
        'expiresin',
        {
          _index: 570,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'export',
        {
          _index: 48,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'exports',
        {
          _index: 92,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'express',
        {
          _index: 47,
          title: {},
          body: { 'guards/AccessTokenGuard.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'extends',
        {
          _index: 455,
          title: {},
          body: {
            'classes/RecipeUpdate.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'extracttokenfromheader',
        { _index: 14, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'extracttokenfromheader(request',
        { _index: 33, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'false',
        { _index: 147, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['fast', { _index: 688, title: {}, body: { 'index.html': {} } }],
      ['features', { _index: 697, title: {}, body: { 'index.html': {} } }],
      [
        'fetch',
        {
          _index: 417,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      ['few', { _index: 690, title: {}, body: { 'index.html': {} } }],
      [
        'field',
        {
          _index: 236,
          title: {},
          body: {
            'classes/CreatePostInput.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'field((type',
        {
          _index: 309,
          title: {},
          body: {
            'classes/NewRecipeInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipesArgs.html': {},
          },
        },
      ],
      [
        'field()@column',
        { _index: 315, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'field()@maxlength(30',
        { _index: 301, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'field(type',
        {
          _index: 299,
          title: {},
          body: {
            'classes/NewRecipeInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipesArgs.html': {},
          },
        },
      ],
      [
        'field(undefined',
        {
          _index: 330,
          title: {},
          body: {
            'classes/PostInterface.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'field(undefined)@createdatecolumn({type',
        { _index: 433, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'field(undefined)@primarygeneratedcolumn',
        { _index: 317, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'field({nullable',
        {
          _index: 295,
          title: {},
          body: {
            'classes/NewRecipeInput.html': {},
            'entities/Recipe.html': {},
          },
        },
      ],
      [
        'fieldextensionsestimator',
        {
          _index: 210,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'file',
        {
          _index: 5,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'findall',
        {
          _index: 347,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'findall(recipesargs',
        {
          _index: 541,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'findone',
        {
          _index: 348,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      [
        "findone(@args('id",
        { _index: 379, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'findone(id',
        {
          _index: 360,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      [
        'findonebyid',
        {
          _index: 525,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'findonebyid(id',
        {
          _index: 543,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      ['focus', { _index: 696, title: {}, body: { 'index.html': {} } }],
      ['follow', { _index: 731, title: {}, body: { 'index.html': {} } }],
      [
        'found',
        {
          _index: 419,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      ['framework', { _index: 635, title: {}, body: { 'index.html': {} } }],
      ['full', { _index: 726, title: {}, body: { 'index.html': {} } }],
      ['function', { _index: 587, title: {}, body: { 'coverage.html': {} } }],
      [
        'functions',
        {
          _index: 626,
          title: { 'miscellaneous/functions.html': {} },
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      ['g', { _index: 692, title: {}, body: { 'index.html': {} } }],
      [
        'getcomplexity',
        {
          _index: 211,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'gethello',
        {
          _index: 77,
          title: {},
          body: {
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
          },
        },
      ],
      ['getting', { _index: 632, title: { 'index.html': {} }, body: {} }],
      [
        'gqlschemahost',
        {
          _index: 204,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      ['graph', { _index: 719, title: {}, body: { 'index.html': {} } }],
      [
        'graphql',
        {
          _index: 138,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'classes/RecipesResolver.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'graphqlerror',
        {
          _index: 209,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'graphqlmodule',
        { _index: 106, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'graphqlmodule.forroot',
        { _index: 142, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'graphqlrequestlistener',
        {
          _index: 206,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
          },
        },
      ],
      [
        'graphqlschema',
        {
          _index: 630,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'graphqlschemahost',
        {
          _index: 202,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      ['grow', { _index: 741, title: {}, body: { 'index.html': {} } }],
      [
        'guard',
        {
          _index: 0,
          title: { 'guards/AccessTokenGuard.html': {} },
          body: { 'coverage.html': {}, 'overview.html': {} },
        },
      ],
      [
        'guards',
        { _index: 2, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      ['hands', { _index: 713, title: {}, body: { 'index.html': {} } }],
      ['handy', { _index: 702, title: {}, body: { 'index.html': {} } }],
      [
        'hello',
        {
          _index: 157,
          title: {},
          body: {
            'injectables/AppService.html': {},
            'interfaces/IQuery.html': {},
          },
        },
      ],
      ['help', { _index: 717, title: {}, body: { 'index.html': {} } }],
      [
        'here',
        {
          _index: 533,
          title: {},
          body: { 'injectables/RecipesService.html': {}, 'index.html': {} },
        },
      ],
      [
        'host',
        { _index: 129, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'httpcode',
        {
          _index: 171,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'httpcode(httpstatus.ok',
        {
          _index: 179,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'https://nestjs.com',
        { _index: 754, title: {}, body: { 'index.html': {} } },
      ],
      [
        'httpstatus',
        {
          _index: 172,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'id',
        {
          _index: 313,
          title: {},
          body: {
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'id)@primarygeneratedcolumn',
        { _index: 438, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      ['identifier', { _index: 577, title: {}, body: { 'coverage.html': {} } }],
      [
        'implements',
        {
          _index: 50,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'classes/LoggingPlugin.html': {},
          },
        },
      ],
      [
        'import',
        {
          _index: 38,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'imports',
        {
          _index: 102,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
          },
        },
      ],
      [
        'in.provider',
        {
          _index: 188,
          title: {},
          body: {
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
          },
        },
      ],
      [
        'in.users.provider.ts',
        {
          _index: 557,
          title: {},
          body: { 'injectables/SignInProvider.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'in.users.provider.ts:21',
        {
          _index: 559,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'in.users.provider.ts:8',
        {
          _index: 558,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'index',
        {
          _index: 9,
          title: { 'index.html': {} },
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'info',
        {
          _index: 3,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      ['information', { _index: 677, title: {}, body: { 'index.html': {} } }],
      [
        'infrastructure',
        { _index: 699, title: {}, body: { 'index.html': {} } },
      ],
      [
        'ingredients',
        {
          _index: 294,
          title: {},
          body: {
            'classes/NewRecipeInput.html': {},
            'entities/Recipe.html': {},
          },
        },
      ],
      [
        'inject',
        {
          _index: 39,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'inject(jwtconfig.key',
        {
          _index: 52,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'injectable',
        {
          _index: 40,
          title: {
            'injectables/AppService.html': {},
            'injectables/AuthService.html': {},
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/AppService.html': {},
            'injectables/AuthService.html': {},
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'injectables',
        {
          _index: 154,
          title: {},
          body: {
            'injectables/AppService.html': {},
            'injectables/AuthService.html': {},
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'injectrepository',
        {
          _index: 408,
          title: {},
          body: {
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'injectrepository(post',
        {
          _index: 411,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'injectrepository(recipe',
        {
          _index: 546,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'inputtype',
        {
          _index: 239,
          title: {},
          body: {
            'classes/CreatePostInput.html': {},
            'classes/NewRecipeInput.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      ['install', { _index: 691, title: {}, body: { 'index.html': {} } }],
      [
        'installcompile',
        { _index: 648, title: {}, body: { 'index.html': {} } },
      ],
      [
        'int',
        {
          _index: 324,
          title: {},
          body: {
            'entities/Post.html': {},
            'classes/PostsResolver.html': {},
            'classes/RecipesArgs.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'int)@min(0',
        { _index: 461, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'int)@min(1)@max(50',
        { _index: 464, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      ['interact', { _index: 720, title: {}, body: { 'index.html': {} } }],
      [
        'interface',
        {
          _index: 274,
          title: {
            'interfaces/IQuery.html': {},
            'interfaces/ReactionPostInput.html': {},
          },
          body: {
            'interfaces/IQuery.html': {},
            'classes/PostInterface.html': {},
            'interfaces/ReactionPostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'interfaces',
        {
          _index: 276,
          title: {},
          body: {
            'interfaces/IQuery.html': {},
            'interfaces/ReactionPostInput.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'interfacetype',
        { _index: 334, title: {}, body: { 'classes/PostInterface.html': {} } },
      ],
      [
        'introspection',
        { _index: 150, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'iquery',
        {
          _index: 275,
          title: { 'interfaces/IQuery.html': {} },
          body: { 'interfaces/IQuery.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'isemail',
        { _index: 553, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'isemail()@isnotempty',
        { _index: 549, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'isglobal',
        { _index: 123, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'isnotempty',
        { _index: 554, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'isoptional',
        { _index: 303, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'isstring',
        { _index: 555, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'isstring()@isnotempty',
        { _index: 551, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'issuer',
        {
          _index: 566,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      ['job', { _index: 734, title: {}, body: { 'index.html': {} } }],
      ['jobs', { _index: 736, title: {}, body: { 'index.html': {} } }],
      ['join', { _index: 747, title: {}, body: { 'index.html': {} } }],
      [
        'jsonwebtoken',
        { _index: 615, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'jwtconfig',
        {
          _index: 45,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'jwtconfiguration',
        {
          _index: 18,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'jwtmodule',
        {
          _index: 119,
          title: {},
          body: { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
        },
      ],
      [
        'jwtmodule.registerasync(jwtconfig.asprovider',
        {
          _index: 153,
          title: {},
          body: { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
        },
      ],
      [
        'jwtservice',
        {
          _index: 17,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      ['kamil', { _index: 751, title: {}, body: { 'index.html': {} } }],
      ['key', { _index: 668, title: {}, body: { 'index.html': {} } }],
      [
        'kind',
        { _index: 262, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'kind.int',
        { _index: 269, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      ['learn', { _index: 705, title: {}, body: { 'index.html': {} } }],
      [
        'left',
        {
          _index: 534,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'legend',
        {
          _index: 88,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'length',
        { _index: 304, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'length(30',
        { _index: 308, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'license',
        {
          _index: 757,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      ['licensed', { _index: 739, title: {}, body: { 'index.html': {} } }],
      [
        'likes',
        {
          _index: 314,
          title: {},
          body: {
            'entities/Post.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      ['linkedin', { _index: 733, title: {}, body: { 'index.html': {} } }],
      [
        'load',
        { _index: 126, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'localhost',
        { _index: 130, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'loggingplugin',
        {
          _index: 282,
          title: { 'classes/LoggingPlugin.html': {} },
          body: { 'classes/LoggingPlugin.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'logic',
        {
          _index: 532,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      ['looking', { _index: 678, title: {}, body: { 'index.html': {} } }],
      ['loop', { _index: 729, title: {}, body: { 'index.html': {} } }],
      ['makes', { _index: 686, title: {}, body: { 'index.html': {} } }],
      ['managing', { _index: 698, title: {}, body: { 'index.html': {} } }],
      [
        'matching',
        {
          _index: 72,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['mau', { _index: 682, title: {}, body: { 'index.html': {} } }],
      [
        'max',
        { _index: 467, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'max(50',
        { _index: 471, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'maximum',
        {
          _index: 228,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'maxlength',
        { _index: 305, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'maxlength(30',
        { _index: 307, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'metadata',
        { _index: 620, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'methods',
        {
          _index: 10,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'min',
        { _index: 468, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'min(0',
        { _index: 469, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'min(1',
        { _index: 470, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'miscellaneous',
        {
          _index: 625,
          title: {
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
          body: {
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'mit',
        {
          _index: 738,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      [
        'mock',
        {
          _index: 528,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      ['mode', { _index: 653, title: {}, body: { 'index.html': {} } }],
      [
        'models/recipe.model',
        {
          _index: 480,
          title: {},
          body: {
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'module',
        {
          _index: 84,
          title: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
          },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'modules',
        {
          _index: 86,
          title: { 'modules.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      ['more', { _index: 676, title: {}, body: { 'index.html': {} } }],
      [
        'mutation',
        {
          _index: 371,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'classes/RecipesResolver.html': {},
          },
        },
      ],
      [
        'mutation((returns',
        {
          _index: 516,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'mutation(returns',
        {
          _index: 490,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'mutation(undefined',
        { _index: 355, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      ['myśliwiec', { _index: 752, title: {}, body: { 'index.html': {} } }],
      [
        'name',
        {
          _index: 24,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      ['need', { _index: 724, title: {}, body: { 'index.html': {} } }],
      [
        'nest',
        {
          _index: 137,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'index.html': {},
            'properties.html': {},
          },
        },
      ],
      ['nestframework', { _index: 756, title: {}, body: { 'index.html': {} } }],
      ['nestjs', { _index: 666, title: {}, body: { 'index.html': {} } }],
      [
        'nestjs/apollo',
        {
          _index: 105,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/common',
        {
          _index: 42,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'modules/PostsModule.html': {},
            'injectables/PostsService.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/config',
        {
          _index: 44,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'injectables/SignInProvider.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/core',
        { _index: 606, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'nestjs/graphql',
        {
          _index: 107,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'classes/UpdatePostInput.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/jwt',
        {
          _index: 43,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'injectables/SignInProvider.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'nestjs/platform',
        { _index: 608, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'nestjs/typeorm',
        {
          _index: 111,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/PostsModule.html': {},
            'injectables/PostsService.html': {},
            'modules/RecipesModule.html': {},
            'injectables/RecipesService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'new',
        {
          _index: 58,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesResolver.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'newrecipedata',
        {
          _index: 492,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'newrecipeinput',
        {
          _index: 291,
          title: { 'classes/NewRecipeInput.html': {} },
          body: {
            'classes/NewRecipeInput.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['node.js', { _index: 634, title: {}, body: { 'index.html': {} } }],
      [
        'notfoundexception',
        {
          _index: 503,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'notfoundexception(id',
        {
          _index: 513,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      ['npm', { _index: 647, title: {}, body: { 'index.html': {} } }],
      [
        'null',
        {
          _index: 281,
          title: {},
          body: {
            'interfaces/IQuery.html': {},
            'injectables/PostsService.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'nullable',
        {
          _index: 279,
          title: {},
          body: {
            'interfaces/IQuery.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Recipe.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'number',
        {
          _index: 258,
          title: {},
          body: {
            'classes/DateScalar.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesArgs.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'object.assign(post',
        {
          _index: 420,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'objecttype',
        {
          _index: 323,
          title: {},
          body: { 'entities/Post.html': {}, 'entities/Recipe.html': {} },
        },
      ],
      ['offer', { _index: 735, title: {}, body: { 'index.html': {} } }],
      ['official', { _index: 683, title: {}, body: { 'index.html': {} } }],
      ['open', { _index: 740, title: {}, body: { 'index.html': {} } }],
      [
        'operationname',
        {
          _index: 219,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'optional',
        {
          _index: 26,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'classes/NewRecipeInput.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'entities/Recipe.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'out',
        {
          _index: 100,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'index.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'overview',
        {
          _index: 761,
          title: { 'overview.html': {} },
          body: { 'overview.html': {} },
        },
      ],
      [
        'package',
        {
          _index: 599,
          title: { 'dependencies.html': {}, 'properties.html': {} },
          body: {},
        },
      ],
      [
        'parameters',
        {
          _index: 22,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'parseliteral',
        { _index: 244, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'parseliteral(ast',
        { _index: 253, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'parsevalue',
        { _index: 245, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'parsevalue(value',
        { _index: 257, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      ['part', { _index: 725, title: {}, body: { 'index.html': {} } }],
      [
        'partialtype',
        {
          _index: 453,
          title: {},
          body: {
            'classes/RecipeUpdate.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'partialtype(createpostinput',
        {
          _index: 574,
          title: {},
          body: { 'classes/UpdatePostInput.html': {} },
        },
      ],
      [
        'partialtype(newrecipeinput',
        { _index: 456, title: {}, body: { 'classes/RecipeUpdate.html': {} } },
      ],
      [
        'password',
        {
          _index: 134,
          title: {},
          body: { 'modules/AppModule.html': {}, 'classes/SignInDto.html': {} },
        },
      ],
      [
        'payload',
        { _index: 61, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      ['pg', { _index: 617, title: {}, body: { 'dependencies.html': {} } }],
      ['platform', { _index: 681, title: {}, body: { 'index.html': {} } }],
      [
        'playground',
        { _index: 146, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['please', { _index: 708, title: {}, body: { 'index.html': {} } }],
      [
        'plugin',
        {
          _index: 208,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
          },
        },
      ],
      [
        'plugins',
        { _index: 151, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'port',
        { _index: 131, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['possible', { _index: 673, title: {}, body: { 'index.html': {} } }],
      [
        'post',
        {
          _index: 173,
          title: { 'entities/Post.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        "post('signin",
        {
          _index: 178,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        "post('signin')@httpcode(httpstatus.ok",
        {
          _index: 167,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'post.input',
        {
          _index: 374,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/UpdatePostInput.html': {},
          },
        },
      ],
      [
        'post.input.ts',
        {
          _index: 233,
          title: {},
          body: {
            'classes/CreatePostInput.html': {},
            'interfaces/ReactionPostInput.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'post.input.ts:6',
        {
          _index: 238,
          title: {},
          body: { 'classes/CreatePostInput.html': {} },
        },
      ],
      [
        'post.input.ts:7',
        {
          _index: 573,
          title: {},
          body: { 'classes/UpdatePostInput.html': {} },
        },
      ],
      [
        'post.input.ts:9',
        {
          _index: 237,
          title: {},
          body: { 'classes/CreatePostInput.html': {} },
        },
      ],
      [
        'post.likes',
        {
          _index: 426,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'postcopy',
        {
          _index: 423,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'postgres',
        { _index: 128, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'postinterface',
        {
          _index: 328,
          title: { 'classes/PostInterface.html': {} },
          body: { 'classes/PostInterface.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'postrepository',
        {
          _index: 396,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'posts',
        { _index: 358, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'posts.resolver',
        { _index: 342, title: {}, body: { 'modules/PostsModule.html': {} } },
      ],
      [
        'posts.service',
        {
          _index: 340,
          title: {},
          body: {
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
          },
        },
      ],
      [
        'posts/posts.module',
        { _index: 109, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'postsmodule',
        {
          _index: 96,
          title: { 'modules/PostsModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/PostsModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'postsresolver',
        {
          _index: 341,
          title: { 'classes/PostsResolver.html': {} },
          body: {
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'postsservice',
        {
          _index: 338,
          title: { 'injectables/PostsService.html': {} },
          body: {
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'prefix',
        {
          _index: 161,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'primarygeneratedcolumn',
        {
          _index: 326,
          title: {},
          body: { 'entities/Post.html': {}, 'entities/Recipe.html': {} },
        },
      ],
      [
        'private',
        {
          _index: 13,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'process.env.node_env',
        {
          _index: 121,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['production', { _index: 655, title: {}, body: { 'index.html': {} } }],
      ['progressive', { _index: 633, title: {}, body: { 'index.html': {} } }],
      ['project', { _index: 644, title: {}, body: { 'index.html': {} } }],
      [
        'promise',
        {
          _index: 32,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'classes/ComplexityPlugin.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/PostsResolver.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'properties',
        {
          _index: 234,
          title: { 'properties.html': {} },
          body: {
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/SignInDto.html': {},
            'classes/UpdatePostInput.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'providers',
        {
          _index: 91,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'providers/sign',
        {
          _index: 187,
          title: {},
          body: {
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
          },
        },
      ],
      [
        'public',
        {
          _index: 163,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'pubsub',
        {
          _index: 505,
          title: {},
          body: {
            'classes/RecipesResolver.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        "pubsub.asynciterableiterator('recipeadded",
        {
          _index: 523,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        "pubsub.publish('recipeadded",
        {
          _index: 519,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'purposes',
        {
          _index: 536,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'put',
        {
          _index: 529,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'query',
        {
          _index: 213,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/PostsResolver.html': {},
            'classes/RecipesResolver.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'query((returns',
        {
          _index: 510,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'query(returns',
        {
          _index: 494,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'query(undefined',
        { _index: 357, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      ['questions', { _index: 706, title: {}, body: { 'index.html': {} } }],
      [
        'reaction',
        {
          _index: 363,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'interfaces/ReactionPostInput.html': {},
          },
        },
      ],
      [
        'reactionpost',
        { _index: 349, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'reactionpost(id',
        { _index: 362, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'reactionpostinput',
        {
          _index: 409,
          title: { 'interfaces/ReactionPostInput.html': {} },
          body: {
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'reactiontype',
        {
          _index: 402,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      ['read', { _index: 748, title: {}, body: { 'index.html': {} } }],
      [
        'readonly',
        {
          _index: 51,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      ['ready', { _index: 664, title: {}, body: { 'index.html': {} } }],
      [
        'real',
        {
          _index: 530,
          title: {},
          body: { 'injectables/RecipesService.html': {}, 'index.html': {} },
        },
      ],
      [
        'reation',
        {
          _index: 390,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'reation(id',
        {
          _index: 401,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'recipe',
        {
          _index: 430,
          title: { 'entities/Recipe.html': {} },
          body: {
            'entities/Recipe.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        "recipe(@args('id",
        {
          _index: 511,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'recipe(id',
        {
          _index: 493,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'recipe.input',
        {
          _index: 454,
          title: {},
          body: {
            'classes/RecipeUpdate.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'recipe.input.ts',
        {
          _index: 293,
          title: {},
          body: { 'classes/NewRecipeInput.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'recipe.input.ts:13',
        { _index: 298, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'recipe.input.ts:16',
        { _index: 300, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'recipe.input.ts:8',
        { _index: 302, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'recipeadded',
        {
          _index: 484,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'reciperepository',
        {
          _index: 537,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'recipes',
        {
          _index: 485,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'recipes(@args',
        {
          _index: 514,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'recipes(recipesargs',
        {
          _index: 498,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'recipes.resolver',
        { _index: 478, title: {}, body: { 'modules/RecipesModule.html': {} } },
      ],
      [
        'recipes.service',
        {
          _index: 479,
          title: {},
          body: {
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
          },
        },
      ],
      [
        'recipes/recipes.module',
        { _index: 108, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'recipesargs',
        {
          _index: 457,
          title: { 'classes/RecipesArgs.html': {} },
          body: {
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'recipesmodule',
        {
          _index: 97,
          title: { 'modules/RecipesModule.html': {} },
          body: {
            'modules/AppModule.html': {},
            'modules/RecipesModule.html': {},
            'modules.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'recipesresolver',
        {
          _index: 477,
          title: { 'classes/RecipesResolver.html': {} },
          body: {
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'recipesservice',
        {
          _index: 474,
          title: { 'injectables/RecipesService.html': {} },
          body: {
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'recipeupdate',
        {
          _index: 449,
          title: { 'classes/RecipeUpdate.html': {} },
          body: { 'classes/RecipeUpdate.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'reflect',
        { _index: 619, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'remove',
        {
          _index: 391,
          title: {},
          body: {
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'remove(id',
        {
          _index: 404,
          title: {},
          body: {
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'removepost',
        { _index: 350, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        "removepost(@args('id",
        { _index: 383, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'removepost(id',
        { _index: 365, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'removerecipe',
        {
          _index: 486,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        "removerecipe(@args('id",
        {
          _index: 520,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'removerecipe(id',
        {
          _index: 500,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'repository',
        {
          _index: 394,
          title: {},
          body: {
            'injectables/PostsService.html': {},
            'injectables/RecipesService.html': {},
            'index.html': {},
            'properties.html': {},
          },
        },
      ],
      [
        'request',
        {
          _index: 34,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'classes/ComplexityPlugin.html': {},
          },
        },
      ],
      [
        'request.headers.authorization?.split',
        { _index: 69, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'request.operationname',
        {
          _index: 220,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'request.variables',
        {
          _index: 222,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        "request['user",
        { _index: 65, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'requestdidstart',
        {
          _index: 200,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'classes/LoggingPlugin.html': {},
          },
        },
      ],
      ['requiring', { _index: 689, title: {}, body: { 'index.html': {} } }],
      [
        'reset',
        {
          _index: 99,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'resolver',
        {
          _index: 370,
          title: {},
          body: {
            'classes/PostsResolver.html': {},
            'classes/RecipesResolver.html': {},
          },
        },
      ],
      [
        'resolver((of',
        {
          _index: 509,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      ['resources', { _index: 700, title: {}, body: { 'index.html': {} } }],
      [
        'response',
        { _index: 290, title: {}, body: { 'classes/LoggingPlugin.html': {} } },
      ],
      [
        'results',
        {
          _index: 71,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/functions.html': {},
            'index.html': {},
            'modules.html': {},
            'overview.html': {},
            'properties.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'return',
        {
          _index: 67,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'returns',
        {
          _index: 31,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      ['run', { _index: 649, title: {}, body: { 'index.html': {} } }],
      ['runs', { _index: 671, title: {}, body: { 'index.html': {} } }],
      ['rxjs', { _index: 622, title: {}, body: { 'dependencies.html': {} } }],
      ['scalable', { _index: 638, title: {}, body: { 'index.html': {} } }],
      [
        'scalar',
        { _index: 251, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        "scalar('date",
        { _index: 263, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'schema',
        {
          _index: 215,
          title: {},
          body: {
            'classes/ComplexityPlugin.html': {},
            'miscellaneous/functions.html': {},
          },
        },
      ],
      [
        'schema.gql',
        { _index: 145, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'secret',
        {
          _index: 568,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'send',
        { _index: 289, title: {}, body: { 'classes/LoggingPlugin.html': {} } },
      ],
      [
        'sent',
        { _index: 267, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'serialize',
        { _index: 246, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'serialize(value',
        { _index: 260, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      ['server', { _index: 639, title: {}, body: { 'index.html': {} } }],
      [
        "setmetadata('auth",
        {
          _index: 773,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['setup', { _index: 645, title: {}, body: { 'index.html': {} } }],
      ['side', { _index: 640, title: {}, body: { 'index.html': {} } }],
      [
        'signin',
        {
          _index: 164,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'signin(@body',
        {
          _index: 180,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'signin(signindto',
        {
          _index: 165,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'signin(singindto',
        {
          _index: 192,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'signindto',
        {
          _index: 166,
          title: { 'classes/SignInDto.html': {} },
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'signindto.email',
        {
          _index: 562,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'signinprovider',
        {
          _index: 184,
          title: { 'injectables/SignInProvider.html': {} },
          body: {
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'injectables/SignInProvider.html': {},
            'coverage.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'simple',
        {
          _index: 441,
          title: {},
          body: { 'entities/Recipe.html': {}, 'index.html': {} },
        },
      ],
      [
        'simpleestimator',
        {
          _index: 212,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'singindto',
        {
          _index: 194,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'skip',
        { _index: 459, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'sortschema',
        { _index: 149, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'source',
        {
          _index: 4,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'modules/AppModule.html': {},
            'injectables/AppService.html': {},
            'controllers/AuthController.html': {},
            'modules/AuthModule.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/LoggingPlugin.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'modules/PostsModule.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'modules/RecipesModule.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'index.html': {},
          },
        },
      ],
      ['sponsors', { _index: 743, title: {}, body: { 'index.html': {} } }],
      [
        'src/.../app.module.ts',
        {
          _index: 771,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/.../auth.decorator.ts',
        {
          _index: 770,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/.../graphql.ts',
        {
          _index: 769,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/.../main.ts',
        {
          _index: 627,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/.../recipes.resolver.ts',
        {
          _index: 772,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/.../upper',
        {
          _index: 628,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/app.controller.ts',
        {
          _index: 76,
          title: {},
          body: { 'controllers/AppController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/app.controller.ts:9',
        {
          _index: 79,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'src/app.module.ts',
        {
          _index: 101,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'src/app.service.ts',
        {
          _index: 155,
          title: {},
          body: { 'injectables/AppService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/app.service.ts:5',
        { _index: 156, title: {}, body: { 'injectables/AppService.html': {} } },
      ],
      [
        'src/auth/auth.controller.ts',
        {
          _index: 160,
          title: {},
          body: { 'controllers/AuthController.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/auth.controller.ts:16',
        {
          _index: 168,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'src/auth/auth.module.ts',
        { _index: 185, title: {}, body: { 'modules/AuthModule.html': {} } },
      ],
      [
        'src/auth/auth.service.ts',
        {
          _index: 189,
          title: {},
          body: { 'injectables/AuthService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:14',
        {
          _index: 193,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/auth.service.ts:6',
        {
          _index: 191,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'src/auth/decorators/auth.decorator.ts',
        {
          _index: 583,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/variables.html': {} },
        },
      ],
      [
        'src/auth/dtos/signin.dto.ts',
        {
          _index: 547,
          title: {},
          body: { 'classes/SignInDto.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/dtos/signin.dto.ts:10',
        { _index: 552, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'src/auth/dtos/signin.dto.ts:6',
        { _index: 550, title: {}, body: { 'classes/SignInDto.html': {} } },
      ],
      [
        'src/auth/guards/access',
        {
          _index: 6,
          title: {},
          body: { 'guards/AccessTokenGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/auth/providers/sign',
        {
          _index: 556,
          title: {},
          body: { 'injectables/SignInProvider.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/common/directives/upper',
        {
          _index: 585,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/common/plugins/complexity.plugin.ts',
        {
          _index: 198,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/common/plugins/complexity.plugin.ts:12',
        {
          _index: 203,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'src/common/plugins/complexity.plugin.ts:15',
        {
          _index: 205,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'src/common/plugins/logging.plugin.ts',
        {
          _index: 283,
          title: {},
          body: { 'classes/LoggingPlugin.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/common/plugins/logging.plugin.ts:6',
        { _index: 284, title: {}, body: { 'classes/LoggingPlugin.html': {} } },
      ],
      [
        'src/common/scalars/date.scalar.ts',
        {
          _index: 241,
          title: {},
          body: { 'classes/DateScalar.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/common/scalars/date.scalar.ts:12',
        { _index: 261, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'src/common/scalars/date.scalar.ts:16',
        { _index: 255, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'src/common/scalars/date.scalar.ts:6',
        { _index: 252, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'src/common/scalars/date.scalar.ts:8',
        { _index: 259, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'src/graphql.ts',
        {
          _index: 277,
          title: {},
          body: {
            'interfaces/IQuery.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/graphql.ts:12',
        { _index: 278, title: {}, body: { 'interfaces/IQuery.html': {} } },
      ],
      [
        'src/main.ts',
        {
          _index: 591,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'src/posts/dto/create',
        {
          _index: 232,
          title: {},
          body: { 'classes/CreatePostInput.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/posts/dto/post.interface.ts',
        {
          _index: 329,
          title: {},
          body: { 'classes/PostInterface.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/posts/dto/post.interface.ts:12',
        { _index: 331, title: {}, body: { 'classes/PostInterface.html': {} } },
      ],
      [
        'src/posts/dto/post.interface.ts:6',
        { _index: 332, title: {}, body: { 'classes/PostInterface.html': {} } },
      ],
      [
        'src/posts/dto/post.interface.ts:9',
        { _index: 333, title: {}, body: { 'classes/PostInterface.html': {} } },
      ],
      [
        'src/posts/dto/reaction',
        {
          _index: 428,
          title: {},
          body: {
            'interfaces/ReactionPostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'src/posts/dto/update',
        {
          _index: 572,
          title: {},
          body: { 'classes/UpdatePostInput.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/posts/entities/post.entity.ts',
        { _index: 322, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'src/posts/entities/posts.entity.ts',
        {
          _index: 312,
          title: {},
          body: { 'entities/Post.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/posts/entities/posts.entity.ts:10',
        { _index: 318, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'src/posts/entities/posts.entity.ts:14',
        { _index: 321, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'src/posts/entities/posts.entity.ts:18',
        { _index: 316, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'src/posts/entities/posts.entity.ts:22',
        { _index: 320, title: {}, body: { 'entities/Post.html': {} } },
      ],
      [
        'src/posts/posts.module.ts',
        { _index: 339, title: {}, body: { 'modules/PostsModule.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts',
        {
          _index: 345,
          title: {},
          body: { 'classes/PostsResolver.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/posts/posts.resolver.ts:12',
        { _index: 356, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts:17',
        { _index: 359, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts:22',
        { _index: 361, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts:27',
        { _index: 369, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts:32',
        { _index: 366, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts:37',
        { _index: 364, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.resolver.ts:8',
        { _index: 353, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'src/posts/posts.service.ts',
        {
          _index: 388,
          title: {},
          body: { 'injectables/PostsService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:10',
        {
          _index: 395,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:16',
        {
          _index: 398,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:21',
        {
          _index: 399,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:25',
        {
          _index: 400,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:29',
        {
          _index: 407,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:44',
        {
          _index: 405,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/posts/posts.service.ts:61',
        {
          _index: 403,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'src/recipes/dto/new',
        {
          _index: 292,
          title: {},
          body: { 'classes/NewRecipeInput.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/recipes/dto/recipe',
        {
          _index: 450,
          title: {},
          body: { 'classes/RecipeUpdate.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/recipes/dto/recipes.args.ts',
        {
          _index: 458,
          title: {},
          body: { 'classes/RecipesArgs.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/recipes/dto/recipes.args.ts:13',
        { _index: 465, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'src/recipes/dto/recipes.args.ts:8',
        { _index: 462, title: {}, body: { 'classes/RecipesArgs.html': {} } },
      ],
      [
        'src/recipes/models/recipe.model.ts',
        {
          _index: 431,
          title: {},
          body: { 'entities/Recipe.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/recipes/models/recipe.model.ts:14',
        { _index: 439, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'src/recipes/models/recipe.model.ts:20',
        { _index: 445, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'src/recipes/models/recipe.model.ts:26',
        { _index: 437, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'src/recipes/models/recipe.model.ts:32',
        { _index: 434, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'src/recipes/models/recipe.model.ts:38',
        { _index: 443, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'src/recipes/recipes.module.ts',
        { _index: 475, title: {}, body: { 'modules/RecipesModule.html': {} } },
      ],
      [
        'src/recipes/recipes.resolver.ts',
        {
          _index: 482,
          title: {},
          body: {
            'classes/RecipesResolver.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'src/recipes/recipes.resolver.ts:12',
        {
          _index: 488,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'src/recipes/recipes.resolver.ts:16',
        {
          _index: 495,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'src/recipes/recipes.resolver.ts:25',
        {
          _index: 499,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'src/recipes/recipes.resolver.ts:30',
        {
          _index: 491,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'src/recipes/recipes.resolver.ts:39',
        {
          _index: 502,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'src/recipes/recipes.resolver.ts:44',
        {
          _index: 497,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'src/recipes/recipes.service.ts',
        {
          _index: 524,
          title: {},
          body: { 'injectables/RecipesService.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/recipes/recipes.service.ts:24',
        {
          _index: 539,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'src/recipes/recipes.service.ts:28',
        {
          _index: 544,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'src/recipes/recipes.service.ts:32',
        {
          _index: 542,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'src/recipes/recipes.service.ts:36',
        {
          _index: 545,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      [
        'src/recipes/recipes.service.ts:9',
        {
          _index: 527,
          title: {},
          body: { 'injectables/RecipesService.html': {} },
        },
      ],
      ['start', { _index: 651, title: {}, body: { 'index.html': {} } }],
      ['start:dev', { _index: 654, title: {}, body: { 'index.html': {} } }],
      ['start:prodrun', { _index: 656, title: {}, body: { 'index.html': {} } }],
      [
        'started',
        {
          _index: 286,
          title: { 'index.html': {} },
          body: { 'classes/LoggingPlugin.html': {} },
        },
      ],
      [
        'starter',
        {
          _index: 643,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      ['statements', { _index: 578, title: {}, body: { 'coverage.html': {} } }],
      ['stay', { _index: 728, title: {}, body: { 'index.html': {} } }],
      ['steps', { _index: 669, title: {}, body: { 'index.html': {} } }],
      [
        'straightforward',
        { _index: 687, title: {}, body: { 'index.html': {} } },
      ],
      [
        'string',
        {
          _index: 36,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'controllers/AppController.html': {},
            'injectables/AppService.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'sub',
        {
          _index: 561,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'subscription',
        {
          _index: 504,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'subscription((returns',
        {
          _index: 522,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'subscription(returns',
        {
          _index: 496,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'subscriptions',
        {
          _index: 506,
          title: {},
          body: { 'classes/RecipesResolver.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        'support',
        {
          _index: 707,
          title: {},
          body: { 'index.html': {}, 'modules.html': {} },
        },
      ],
      ['svg', { _index: 759, title: {}, body: { 'modules.html': {} } }],
      [
        'synchronize',
        { _index: 141, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        't',
        {
          _index: 280,
          title: {},
          body: {
            'interfaces/IQuery.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['table', { _index: 598, title: {}, body: { 'coverage.html': {} } }],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 597, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'take',
        {
          _index: 460,
          title: {},
          body: { 'classes/RecipesArgs.html': {}, 'index.html': {} },
        },
      ],
      ['test', { _index: 659, title: {}, body: { 'index.html': {} } }],
      [
        'test:covdeployment',
        { _index: 662, title: {}, body: { 'index.html': {} } },
      ],
      ['test:e2e', { _index: 661, title: {}, body: { 'index.html': {} } }],
      ['tests', { _index: 657, title: {}, body: { 'index.html': {} } }],
      ['thanks', { _index: 742, title: {}, body: { 'index.html': {} } }],
      [
        'this.appservice.gethello',
        {
          _index: 83,
          title: {},
          body: { 'controllers/AppController.html': {} },
        },
      ],
      [
        'this.authservice.signin(signindto',
        {
          _index: 181,
          title: {},
          body: { 'controllers/AuthController.html': {} },
        },
      ],
      [
        'this.extracttokenfromheader(request',
        { _index: 56, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'this.gqlschemahost',
        {
          _index: 216,
          title: {},
          body: { 'classes/ComplexityPlugin.html': {} },
        },
      ],
      [
        'this.jwtconfiguration',
        { _index: 64, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'this.jwtconfiguration.accesstokenttl',
        {
          _index: 571,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'this.jwtconfiguration.audience',
        {
          _index: 565,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'this.jwtconfiguration.issuer',
        {
          _index: 567,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'this.jwtconfiguration.secret',
        {
          _index: 569,
          title: {},
          body: { 'injectables/SignInProvider.html': {} },
        },
      ],
      [
        'this.jwtservice.signasync',
        {
          _index: 63,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'this.postrepository.create(createpostinput',
        {
          _index: 412,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'this.postrepository.find',
        {
          _index: 414,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'this.postrepository.findone',
        {
          _index: 415,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'this.postrepository.remove(post',
        {
          _index: 424,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'this.postrepository.save(post',
        {
          _index: 413,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'this.postrepository.save(updatedpost',
        {
          _index: 427,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'this.postsservice.create(createpostinput',
        { _index: 377, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'this.postsservice.findall',
        { _index: 378, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'this.postsservice.findone(id',
        { _index: 380, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'this.postsservice.reation(id',
        { _index: 387, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'this.postsservice.remove(id',
        { _index: 384, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'this.postsservice.update(updatepostinput.id',
        { _index: 382, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'this.recipesservice.create(newrecipedata',
        {
          _index: 518,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'this.recipesservice.findall(recipesargs',
        {
          _index: 515,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'this.recipesservice.findonebyid(id',
        {
          _index: 512,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'this.recipesservice.remove(id',
        {
          _index: 521,
          title: {},
          body: { 'classes/RecipesResolver.html': {} },
        },
      ],
      [
        'this.signinprovider.signin(singindto',
        {
          _index: 195,
          title: {},
          body: { 'injectables/AuthService.html': {} },
        },
      ],
      [
        'throw',
        {
          _index: 57,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/DateScalar.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
          },
        },
      ],
      ['time', { _index: 721, title: {}, body: { 'index.html': {} } }],
      [
        'title',
        {
          _index: 235,
          title: {},
          body: {
            'classes/CreatePostInput.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'entities/Recipe.html': {},
          },
        },
      ],
      [
        'token',
        { _index: 55, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'token.guard.ts',
        {
          _index: 8,
          title: {},
          body: { 'guards/AccessTokenGuard.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'token.guard.ts:14',
        { _index: 21, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'token.guard.ts:27',
        { _index: 29, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'token.guard.ts:49',
        { _index: 35, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'token/access',
        {
          _index: 7,
          title: {},
          body: { 'guards/AccessTokenGuard.html': {}, 'coverage.html': {} },
        },
      ],
      ['touch', { _index: 749, title: {}, body: { 'index.html': {} } }],
      [
        'train',
        { _index: 139, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'transformer',
        { _index: 609, title: {}, body: { 'dependencies.html': {} } },
      ],
      [
        'true',
        {
          _index: 68,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AppModule.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Recipe.html': {},
            'injectables/RecipesService.html': {},
          },
        },
      ],
      [
        'true})@column({type',
        { _index: 435, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      [
        'true})@isoptional()@length(30',
        { _index: 296, title: {}, body: { 'classes/NewRecipeInput.html': {} } },
      ],
      [
        'try',
        {
          _index: 60,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'injectables/PostsService.html': {},
          },
        },
      ],
      ['twitter', { _index: 755, title: {}, body: { 'index.html': {} } }],
      [
        'type',
        {
          _index: 25,
          title: {},
          body: {
            'guards/AccessTokenGuard.html': {},
            'modules/AppModule.html': {},
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'classes/ComplexityPlugin.html': {},
            'classes/CreatePostInput.html': {},
            'classes/DateScalar.html': {},
            'interfaces/IQuery.html': {},
            'classes/NewRecipeInput.html': {},
            'entities/Post.html': {},
            'classes/PostInterface.html': {},
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'interfaces/ReactionPostInput.html': {},
            'entities/Recipe.html': {},
            'classes/RecipeUpdate.html': {},
            'classes/RecipesArgs.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/RecipesService.html': {},
            'classes/SignInDto.html': {},
            'injectables/SignInProvider.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
            'miscellaneous/functions.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'typealiases',
        {
          _index: 767,
          title: { 'miscellaneous/typealiases.html': {} },
          body: {},
        },
      ],
      [
        'typeorm',
        {
          _index: 327,
          title: {},
          body: {
            'entities/Post.html': {},
            'injectables/PostsService.html': {},
            'entities/Recipe.html': {},
            'injectables/RecipesService.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'typeormmodule',
        {
          _index: 110,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
          },
        },
      ],
      [
        'typeormmodule.forfeature([post',
        { _index: 344, title: {}, body: { 'modules/PostsModule.html': {} } },
      ],
      [
        'typeormmodule.forfeature([recipe',
        { _index: 481, title: {}, body: { 'modules/RecipesModule.html': {} } },
      ],
      [
        'typeormmodule.forroot',
        { _index: 127, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      [
        'typescript',
        {
          _index: 642,
          title: {},
          body: { 'index.html': {}, 'properties.html': {} },
        },
      ],
      [
        'unauthorizedexception',
        { _index: 41, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        "unauthorizedexception('unauthorized",
        { _index: 59, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      [
        'undefined',
        { _index: 37, title: {}, body: { 'guards/AccessTokenGuard.html': {} } },
      ],
      ['unit', { _index: 658, title: {}, body: { 'index.html': {} } }],
      [
        'unknown',
        {
          _index: 169,
          title: {},
          body: {
            'controllers/AuthController.html': {},
            'injectables/AuthService.html': {},
            'injectables/PostsService.html': {},
            'classes/RecipesResolver.html': {},
            'injectables/SignInProvider.html': {},
          },
        },
      ],
      [
        'update',
        {
          _index: 392,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'update(id',
        {
          _index: 406,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'update.ts',
        {
          _index: 451,
          title: {},
          body: { 'classes/RecipeUpdate.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'update.ts:7',
        { _index: 452, title: {}, body: { 'classes/RecipeUpdate.html': {} } },
      ],
      [
        'updatedpost',
        {
          _index: 425,
          title: {},
          body: { 'injectables/PostsService.html': {} },
        },
      ],
      [
        'updatepost',
        { _index: 351, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        "updatepost(@args('updatepostinput",
        { _index: 381, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'updatepost(updatepostinput',
        { _index: 367, title: {}, body: { 'classes/PostsResolver.html': {} } },
      ],
      [
        'updatepostinput',
        {
          _index: 368,
          title: { 'classes/UpdatePostInput.html': {} },
          body: {
            'classes/PostsResolver.html': {},
            'injectables/PostsService.html': {},
            'classes/UpdatePostInput.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['updates', { _index: 730, title: {}, body: { 'index.html': {} } }],
      [
        'upperdirectivetransformer',
        {
          _index: 588,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'upperdirectivetransformer(schema',
        {
          _index: 629,
          title: {},
          body: { 'miscellaneous/functions.html': {} },
        },
      ],
      [
        'username',
        { _index: 133, title: {}, body: { 'modules/AppModule.html': {} } },
      ],
      ['using', { _index: 722, title: {}, body: { 'index.html': {} } }],
      [
        'validator',
        {
          _index: 306,
          title: {},
          body: {
            'classes/NewRecipeInput.html': {},
            'classes/RecipesArgs.html': {},
            'classes/SignInDto.html': {},
            'dependencies.html': {},
          },
        },
      ],
      [
        'value',
        {
          _index: 248,
          title: {},
          body: {
            'classes/DateScalar.html': {},
            'entities/Post.html': {},
            'classes/RecipesArgs.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'value.gettime',
        { _index: 266, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'valuenode',
        { _index: 254, title: {}, body: { 'classes/DateScalar.html': {} } },
      ],
      [
        'varchar',
        { _index: 436, title: {}, body: { 'entities/Recipe.html': {} } },
      ],
      ['variable', { _index: 580, title: {}, body: { 'coverage.html': {} } }],
      [
        'variables',
        {
          _index: 221,
          title: { 'miscellaneous/variables.html': {} },
          body: {
            'classes/ComplexityPlugin.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['version', { _index: 766, title: {}, body: { 'properties.html': {} } }],
      ['video', { _index: 715, title: {}, body: { 'index.html': {} } }],
      ['visit', { _index: 704, title: {}, body: { 'index.html': {} } }],
      ['visualize', { _index: 718, title: {}, body: { 'index.html': {} } }],
      ['watch', { _index: 652, title: {}, body: { 'index.html': {} } }],
      ['website', { _index: 753, title: {}, body: { 'index.html': {} } }],
      [
        'willsendresponse',
        { _index: 287, title: {}, body: { 'classes/LoggingPlugin.html': {} } },
      ],
      ['working', { _index: 703, title: {}, body: { 'index.html': {} } }],
      [
        'world',
        { _index: 158, title: {}, body: { 'injectables/AppService.html': {} } },
      ],
      ['x', { _index: 732, title: {}, body: { 'index.html': {} } }],
      ["you'd", { _index: 746, title: {}, body: { 'index.html': {} } }],
      ["you're", { _index: 663, title: {}, body: { 'index.html': {} } }],
      [
        'zoom',
        {
          _index: 98,
          title: {},
          body: {
            'modules/AppModule.html': {},
            'modules/AuthModule.html': {},
            'modules/PostsModule.html': {},
            'modules/RecipesModule.html': {},
            'overview.html': {},
          },
        },
      ],
    ],
    pipeline: ['stemmer'],
  },
  store: {
    'guards/AccessTokenGuard.html': {
      url: 'guards/AccessTokenGuard.html',
      title: 'guard - AccessTokenGuard',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../../config/jwt.config';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    /**\n     * inject jwtService\n     */\n    private readonly jwtService: JwtService,\n    /**\n     * inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request: Request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException('unauthorized');\n    }\n\n    try {\n      const payload = await this.jwtService.signAsync(\n        token,\n        this.jwtConfiguration,\n      );\n\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException('unauthorized');\n    }\n\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'controllers/AppController.html': {
      url: 'controllers/AppController.html',
      title: 'controller - AppController',
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \'@nestjs/common\';\nimport { AppService } from \'./app.service\';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/AppModule.html': {
      url: 'modules/AppModule.html',
      title: 'module - AppModule',
      body: "\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            RecipesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { RecipesModule } from './recipes/recipes.module';\nimport { PostsModule } from './posts/posts.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';\nimport { AuthModule } from './auth/auth.module';\nimport jwtConfig from './auth/config/jwt.config';\nimport { ConfigModule } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport { JwtModule } from '@nestjs/jwt';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: [!ENV ? '.env' : `.env.${ENV}`],\n      load: [appConfig],\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      username: 'postgres',\n      password: '12345',\n      database: 'nest-graphql-train',\n      autoLoadEntities: true,\n      synchronize: true,\n    }),\n    RecipesModule,\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: 'schema.gql',\n      playground: false,\n      debug: true,\n      sortSchema: true,\n      introspection: true,\n      plugins: [ApolloServerPluginLandingPageLocalDefault()],\n    }),\n    PostsModule,\n    AuthModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/AppService.html': {
      url: 'injectables/AppService.html',
      title: 'injectable - AppService',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \'Hello World!\';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/AuthController.html': {
      url: 'controllers/AuthController.html',
      title: 'controller - AuthController',
      body: "\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signIn')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignInDto } from './dtos/signin.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /**\n     * inject authService\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  @Post('signIn')\n  @HttpCode(HttpStatus.OK)\n  public async signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'modules/AuthModule.html': {
      url: 'modules/AuthModule.html',
      title: 'module - AuthModule',
      body: "\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { SignInProvider } from './providers/sign-in.provider';\n\n@Module({\n  providers: [AuthService, SignInProvider],\n  controllers: [AuthController],\n  imports: [\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/AuthService.html': {
      url: 'injectables/AuthService.html',
      title: 'injectable - AuthService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(singInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                singInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { SignInDto } from './dtos/signin.dto';\nimport { SignInProvider } from './providers/sign-in.provider';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * Inject SignInProvider\n     */\n    private readonly signInProvider: SignInProvider,\n  ) {}\n\n  public async signIn(singInDto: SignInDto) {\n    return this.signInProvider.signIn(singInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/ComplexityPlugin.html': {
      url: 'classes/ComplexityPlugin.html',
      title: 'class - ComplexityPlugin',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComplexityPlugin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/plugins/complexity.plugin.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ApolloServerPlugin\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                requestDidStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(gqlSchemaHost: GraphQLSchemaHost)\n                    \n                \n                        \n                            \n                                Defined in src/common/plugins/complexity.plugin.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gqlSchemaHost\n                                                  \n                                                        \n                                                                    GraphQLSchemaHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requestDidStart\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestDidStart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/plugins/complexity.plugin.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApolloServerPlugin, GraphQLRequestListener } from '@apollo/server';\nimport { Plugin } from '@nestjs/apollo';\nimport { GraphQLSchemaHost } from '@nestjs/graphql';\nimport { GraphQLError } from 'graphql';\nimport {\n  fieldExtensionsEstimator,\n  getComplexity,\n  simpleEstimator,\n} from 'graphql-query-complexity';\n\n@Plugin()\nexport class ComplexityPlugin implements ApolloServerPlugin {\n  constructor(private gqlSchemaHost: GraphQLSchemaHost) {}\n\n  async requestDidStart(): Promise> {\n    const { schema } = this.gqlSchemaHost;\n\n    return {\n      async didResolveOperation({ request, document }) {\n        const complexity = getComplexity({\n          schema,\n          operationName: request.operationName,\n          query: document,\n          variables: request.variables,\n          estimators: [\n            fieldExtensionsEstimator(),\n            simpleEstimator({ defaultComplexity: 1 }),\n          ],\n        });\n        if (complexity >= 20) {\n          throw new GraphQLError(\n            `Query is too complex: ${complexity}. Maximum allowed complexity: 20`,\n          );\n        }\n        console.log('Query Complexity:', complexity);\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/CreatePostInput.html': {
      url: 'classes/CreatePostInput.html',
      title: 'class - CreatePostInput',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InputType, Field } from \'@nestjs/graphql\';\n\n@InputType()\nexport class CreatePostInput {\n  @Field()\n  title: string;\n\n  @Field()\n  body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/DateScalar.html': {
      url: 'classes/DateScalar.html',
      title: 'class - DateScalar',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateScalar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/scalars/date.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Date custom scalar type'\n                    \n                \n                    \n                        \n                                Defined in src/common/scalars/date.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(ast: ValueNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ast\n                                            \n                                                        ValueNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CustomScalar, Scalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', (type) => Date)\nexport class DateScalar implements CustomScalar {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(parseInt(ast.value, 10));\n    }\n    throw new Error(`Invalid kind: ${ast.kind}. Expected kind: ${Kind.INT}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/IQuery.html': {
      url: 'interfaces/IQuery.html',
      title: 'interface - IQuery',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        hello\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hello\n                        \n                    \n                \n            \n            \n                \nhello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/graphql.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Nullable | Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface IQuery {\n    hello(): Nullable | Promise>;\n}\n\ntype Nullable = T | null;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/LoggingPlugin.html': {
      url: 'classes/LoggingPlugin.html',
      title: 'class - LoggingPlugin',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggingPlugin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/plugins/logging.plugin.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ApolloServerPlugin\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                requestDidStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        requestDidStart\n                        \n                    \n                \n            \n            \n                \n                        \n                    requestDidStart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/plugins/logging.plugin.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ApolloServerPlugin, GraphQLRequestListener } from '@apollo/server';\nimport { Plugin } from '@nestjs/apollo';\n\n@Plugin()\nexport class LoggingPlugin implements ApolloServerPlugin {\n  async requestDidStart(): Promise> {\n    console.log('Request started');\n    return {\n      async willSendResponse() {\n        console.log('Will send response');\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/NewRecipeInput.html': {
      url: 'classes/NewRecipeInput.html',
      title: 'class - NewRecipeInput',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewRecipeInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/new-recipe.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()@Length(30, 255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from \'@nestjs/graphql\';\nimport { IsOptional, Length, MaxLength } from \'class-validator\';\n\n@InputType()\nexport class NewRecipeInput {\n  @Field()\n  @MaxLength(30)\n  title: string;\n\n  @Field({ nullable: true })\n  @IsOptional()\n  @Length(30, 255)\n  description?: string;\n\n  @Field((type) => [String])\n  ingredients: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'entities/Post.html': {
      url: 'entities/Post.html',
      title: 'entity - Post',
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entities/posts.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                likes\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/posts.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/posts.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/posts.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entities/posts.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/posts/entities/post.entity.ts\nimport { ObjectType, Field, Int } from \'@nestjs/graphql\';\nimport { Entity, Column, PrimaryGeneratedColumn } from \'typeorm\';\n\n@ObjectType()\n@Entity()\nexport class Post {\n  @Field(() => Int)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field()\n  @Column()\n  title: string;\n\n  @Field()\n  @Column()\n  body: string;\n\n  @Field()\n  @Column()\n  likes: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/PostInterface.html': {
      url: 'classes/PostInterface.html',
      title: 'class - PostInterface',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/post.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/post.interface.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/post.interface.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/post.interface.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, InterfaceType } from \'@nestjs/graphql\';\n\n@InterfaceType({ description: \'Post Interface\' })\nexport default abstract class PostInterface {\n  @Field(() => ID)\n  id: number;\n\n  @Field(() => String)\n  title: string;\n\n  @Field(() => String)\n  body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/PostsModule.html': {
      url: 'modules/PostsModule.html',
      title: 'module - PostsModule',
      body: "\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsResolver } from './posts.resolver';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './entities/posts.entity';\n\n@Module({\n  providers: [PostsResolver, PostsService],\n  imports: [TypeOrmModule.forFeature([Post])],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/PostsResolver.html': {
      url: 'classes/PostsResolver.html',
      title: 'class - PostsResolver',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createPost\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                reactionPost\n                            \n                            \n                                    \n                                removePost\n                            \n                            \n                                    \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.resolver.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostInput: CreatePostInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.resolver.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostInput\n                                            \n                                                            CreatePostInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'posts'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.resolver.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'post'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.resolver.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    reactionPost(id: number, reaction: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.resolver.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reaction\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    removePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.resolver.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePostInput: UpdatePostInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.resolver.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePostInput\n                                            \n                                                            UpdatePostInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver, Query, Mutation, Args, Int } from '@nestjs/graphql';\nimport { PostsService } from './posts.service';\nimport { UpdatePostInput } from './dto/update-post.input';\nimport { CreatePostInput } from './dto/create-post.input';\nimport { Post } from './entities/posts.entity';\n\n@Resolver(() => Post)\nexport class PostsResolver {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Mutation(() => Post)\n  createPost(@Args('createPostInput') createPostInput: CreatePostInput) {\n    return this.postsService.create(createPostInput);\n  }\n\n  @Query(() => [Post], { name: 'posts' })\n  findAll(): Promise {\n    return this.postsService.findAll();\n  }\n\n  @Query(() => Post, { name: 'post' })\n  findOne(@Args('id', { type: () => Int }) id: number) {\n    return this.postsService.findOne(id);\n  }\n\n  @Mutation(() => Post)\n  updatePost(@Args('updatePostInput') updatePostInput: UpdatePostInput) {\n    return this.postsService.update(updatePostInput.id, updatePostInput);\n  }\n\n  @Mutation(() => Post)\n  removePost(@Args('id', { type: () => Int }) id: number) {\n    return this.postsService.remove(id);\n  }\n\n  @Mutation(() => Post)\n  reactionPost(\n    @Args('id', { type: () => Int }) id: number,\n    @Args('reaction') reaction: number,\n  ) {\n    return this.postsService.reation(id, reaction);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/PostsService.html': {
      url: 'injectables/PostsService.html',
      title: 'injectable - PostsService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                reation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createPostInput: CreatePostInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostInput\n                                            \n                                                            CreatePostInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        reation\n                        \n                    \n                \n            \n            \n                \n                        \n                    reation(id: number, reactionType: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reactionType\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updatePostInput: UpdatePostInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/posts.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePostInput\n                                            \n                                                            UpdatePostInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostInput } from './dto/create-post.input';\nimport { UpdatePostInput } from './dto/update-post.input';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from './entities/posts.entity';\nimport { ReactionPostInput } from './dto/reaction-post.input';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post)\n    private readonly postRepository: Repository,\n  ) {}\n\n  create(createPostInput: CreatePostInput) {\n    const post = this.postRepository.create(createPostInput);\n    return this.postRepository.save(post);\n  }\n\n  async findAll() {\n    return await this.postRepository.find();\n  }\n\n  findOne(id: number) {\n    return this.postRepository.findOne({ where: { id } });\n  }\n\n  async update(id: number, updatePostInput: UpdatePostInput) {\n    let post: Post | null = null;\n    try {\n      post = await this.postRepository.findOne({ where: { id } });\n    } catch {\n      throw new Error('couldnt fetch post');\n    }\n    if (!post) {\n      throw new Error('Post not found');\n    }\n    Object.assign(post, updatePostInput);\n\n    return this.postRepository.save(post);\n  }\n\n  async remove(id: number) {\n    let post: Post | null = null;\n\n    try {\n      post = await this.postRepository.findOne({ where: { id } });\n    } catch {\n      throw new Error('network Error');\n    }\n    if (!post) {\n      throw new Error('Post not found');\n    }\n    const postCopy = { ...post };\n\n    await this.postRepository.remove(post);\n    return postCopy;\n  }\n\n  async reation(id: number, reactionType: number) {\n    let post: Post | null = null;\n    try {\n      post = await this.postRepository.findOne({ where: { id } });\n    } catch {\n      throw new Error('couldnt fetch post');\n    }\n\n    if (!post) {\n      throw new Error('Post not found');\n    }\n    if (reactionType) {\n      const updatedPost = { ...post, likes: post.likes + 1 } as Post;\n      await this.postRepository.save(updatedPost);\n      return updatedPost;\n    } else if (!reactionType) {\n      const updatedPost = {\n        ...post,\n        likes: post.likes > 0 ? post.likes - 1 : post.likes,\n      } as Post;\n      await this.postRepository.save(updatedPost);\n      return updatedPost;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/ReactionPostInput.html': {
      url: 'interfaces/ReactionPostInput.html',
      title: 'interface - ReactionPostInput',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReactionPostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/reaction-post.input.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            reaction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        reaction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reaction:     "like" | "dislike"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     "like" | "dislike"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ReactionPostInput {\n  reaction: \'like\' | \'dislike\';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'entities/Recipe.html': {
      url: 'entities/Recipe.html',
      title: 'entity - Recipe',
      body: "\n                   \n\n\n\n\n\n\n\n  Entities\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/models/recipe.model.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                creationDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@CreateDateColumn({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )@Column({type: 'simple-array'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Directive('@upper')@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Directive, Field, ID, ObjectType } from '@nestjs/graphql';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@ObjectType({ description: 'recipe' })\n@Entity()\nexport class Recipe {\n  @Field((type) => ID)\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Directive('@upper')\n  @Column({\n    type: 'varchar',\n  })\n  title: string;\n\n  @Field({ nullable: true })\n  @Column({\n    type: 'varchar',\n  })\n  description?: string;\n\n  @Field(() => Date)\n  @CreateDateColumn({\n    type: 'date',\n  })\n  creationDate: Date;\n\n  @Field((type) => [String])\n  @Column({\n    type: 'simple-array',\n  })\n  ingredients: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/RecipeUpdate.html': {
      url: 'classes/RecipeUpdate.html',
      title: 'class - RecipeUpdate',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipeUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/recipe-update.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipe-update.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, InputType, PartialType } from \'@nestjs/graphql\';\nimport { NewRecipeInput } from \'./new-recipe.input\';\n\n@InputType()\nexport class RecipeUpdate extends PartialType(NewRecipeInput) {\n  @Field(() => ID)\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/RecipesArgs.html': {
      url: 'classes/RecipesArgs.html',
      title: 'class - RecipesArgs',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/recipes.args.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                skip\n                            \n                            \n                                    \n                                    \n                                    \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 25\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(1)@Max(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, Int } from \'@nestjs/graphql\';\nimport { Max, Min } from \'class-validator\';\n\n@ArgsType()\nexport class RecipesArgs {\n  @Field((type) => Int)\n  @Min(0)\n  skip = 0;\n\n  @Field((type) => Int)\n  @Min(1)\n  @Max(50)\n  take = 25;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/RecipesModule.html': {
      url: 'modules/RecipesModule.html',
      title: 'module - RecipesModule',
      body: "\n                   \n\n\n\n\n    Modules\n    RecipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\n\nRecipesService\n\nRecipesService\n\n\n\nRecipesModule\n\nRecipesModule\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipes/recipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DateScalar } from '../common/scalars/date.scalar';\nimport { RecipesResolver } from './recipes.resolver';\nimport { RecipesService } from './recipes.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Recipe } from './models/recipe.model';\n\n@Module({\n  providers: [RecipesResolver, RecipesService, DateScalar],\n  imports: [TypeOrmModule.forFeature([Recipe])],\n})\nexport class RecipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/RecipesResolver.html': {
      url: 'classes/RecipesResolver.html',
      title: 'class - RecipesResolver',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addRecipe\n                            \n                            \n                                    \n                                    Async\n                                recipe\n                            \n                            \n                                    \n                                recipeAdded\n                            \n                            \n                                    \n                                recipes\n                            \n                            \n                                    \n                                    Async\n                                removeRecipe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipesService: RecipesService)\n                    \n                \n                        \n                            \n                                Defined in src/recipes/recipes.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipesService\n                                                  \n                                                        \n                                                                        RecipesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRecipe(newRecipeData: NewRecipeInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newRecipeData\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        recipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipeAdded\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipeAdded()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipes\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipes(recipesArgs: RecipesArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => )\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRecipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Boolean)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport { Args, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';\nimport { PubSub } from 'graphql-subscriptions';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\nimport { RecipesService } from './recipes.service';\n\nconst pubSub = new PubSub();\n\n@Resolver((of) => Recipe)\nexport class RecipesResolver {\n  constructor(private readonly recipesService: RecipesService) {}\n\n  @Query((returns) => Recipe)\n  async recipe(@Args('id') id: string): Promise {\n    const recipe = await this.recipesService.findOneById(id);\n    if (!recipe) {\n      throw new NotFoundException(id);\n    }\n    return recipe;\n  }\n\n  @Query((returns) => [Recipe])\n  recipes(@Args() recipesArgs: RecipesArgs): Promise {\n    return this.recipesService.findAll(recipesArgs);\n  }\n\n  @Mutation((returns) => Recipe)\n  async addRecipe(\n    @Args('newRecipeData') newRecipeData: NewRecipeInput,\n  ): Promise {\n    const recipe = await this.recipesService.create(newRecipeData);\n    pubSub.publish('recipeAdded', { recipeAdded: recipe });\n    return recipe;\n  }\n\n  @Mutation((returns) => Boolean)\n  async removeRecipe(@Args('id', { type: () => String }) id: string) {\n    return this.recipesService.remove(id);\n  }\n\n  @Subscription((returns) => Recipe)\n  recipeAdded() {\n    return pubSub.asyncIterableIterator('recipeAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'injectables/RecipesService.html': {
      url: 'injectables/RecipesService.html',
      title: 'injectable - RecipesService',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/recipes/recipes.service.ts:9\n                            \n                        \n\n                \n                    \n                            MOCK\nPut some real business logic here\nLeft for demonstration purposes\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: NewRecipeInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(recipesArgs: RecipesArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class RecipesService {\n  /**\n   * MOCK\n   * Put some real business logic here\n   * Left for demonstration purposes\n   */\n\n  constructor(\n    /**\n     * Inject the Recipe Repository\n     */\n    @InjectRepository(Recipe)\n    private readonly recipeRepository: Repository,\n  ) {}\n\n  async create(data: NewRecipeInput): Promise {\n    return {} as any;\n  }\n\n  async findOneById(id: string): Promise {\n    return {} as any;\n  }\n\n  async findAll(recipesArgs: RecipesArgs): Promise {\n    return [] as Recipe[];\n  }\n\n  async remove(id: string): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/SignInDto.html': {
      url: 'classes/SignInDto.html',
      title: 'class - SignInDto',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \'class-validator\';\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/SignInProvider.html': {
      url: 'injectables/SignInProvider.html',
      title: 'injectable - SignInProvider',
      body: "\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.users.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.users.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.users.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n    /**\n     * Inject jwtConfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    const accessToken = await this.jwtService.signAsync(\n      {\n        sub: signInDto.email,\n        email: 'example@gmail.com',\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn: this.jwtConfiguration.accessTokenTtl,\n      },\n    );\n    return accessToken;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/UpdatePostInput.html': {
      url: 'classes/UpdatePostInput.html',
      title: 'class - UpdatePostInput',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.input.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostInput } from \'./create-post.input\';\nimport { InputType, Field, Int, PartialType } from \'@nestjs/graphql\';\n\n@InputType()\nexport class UpdatePostInput extends PartialType(CreatePostInput) {\n  @Field(() => Int)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'coverage.html': {
      url: 'coverage.html',
      title: 'coverage - coverage',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.users.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/directives/upper-case.directive.ts\n            \n            function\n            upperDirectiveTransformer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/plugins/complexity.plugin.ts\n            \n            class\n            ComplexityPlugin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/plugins/logging.plugin.ts\n            \n            class\n            LoggingPlugin\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/scalars/date.scalar.ts\n            \n            class\n            DateScalar\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/graphql.ts\n            \n            interface\n            IQuery\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/graphql.ts\n            \n            type alias\n            Nullable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.input.ts\n            \n            class\n            CreatePostInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/post.interface.ts\n            \n            class\n            PostInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dto/reaction-post.input.ts\n            \n            interface\n            ReactionPostInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.input.ts\n            \n            class\n            UpdatePostInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/entities/posts.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/entities/posts.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/recipes/dto/new-recipe.input.ts\n            \n            class\n            NewRecipeInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipes/dto/recipe-update.ts\n            \n            class\n            RecipeUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/recipes/dto/recipes.args.ts\n            \n            class\n            RecipesArgs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/recipes/models/recipe.model.ts\n            \n            entity\n            Recipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipes/models/recipe.model.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/recipes/recipes.resolver.ts\n            \n            class\n            RecipesResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/recipes/recipes.resolver.ts\n            \n            variable\n            pubSub\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipes/recipes.service.ts\n            \n            injectable\n            RecipesService\n            \n                16 %\n                (1/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'dependencies.html': {
      url: 'dependencies.html',
      title: 'package-dependencies - dependencies',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : 4.11.3\n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/apollo : 13.0.2\n        \n            @nestjs/common : 11.0.8\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : 11.0.8\n        \n            @nestjs/graphql : 13.0.2\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : 11.0.8\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : 0.5.1\n        \n            class-validator : 0.14.1\n        \n            graphql : 16.10.0\n        \n            graphql-query-complexity : 1.0.0\n        \n            graphql-subscriptions : 3.0.0\n        \n            jsonwebtoken : ^9.0.2\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : 0.2.2\n        \n            rxjs : 7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/functions.html': {
      url: 'miscellaneous/functions.html',
      title: 'miscellaneous-functions - functions',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            upperDirectiveTransformer   (src/.../upper-case.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/directives/upper-case.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        upperDirectiveTransformer\n                        \n                    \n                \n            \n            \n                \nupperDirectiveTransformer(schema: GraphQLSchema, directiveName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                        GraphQLSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                directiveName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'index.html': {
      url: 'index.html',
      title: 'getting-started - index',
      body: '\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you\'re ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules.html': {
      url: 'modules.html',
      title: 'modules - modules',
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'overview.html': {
      url: 'overview.html',
      title: 'overview - overview',
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nRecipesService\n\nRecipesService\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'properties.html': {
      url: 'properties.html',
      title: 'package-properties - properties',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/typealiases.html': {
      url: 'miscellaneous/typealiases.html',
      title: 'miscellaneous-typealiases - typealiases',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Nullable   (src/.../graphql.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/graphql.ts\n    \n    \n        \n            \n                \n                    \n                    Nullable\n                \n            \n            \n                \n                        T | null\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/variables.html': {
      url: 'miscellaneous/variables.html',
      title: 'miscellaneous-variables - variables',
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            pubSub   (src/.../recipes.resolver.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) => SetMetadata(\'auth\', args)\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/recipes/recipes.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pubSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PubSub()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
